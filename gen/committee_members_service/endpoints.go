// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-members-service endpoints
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package committeemembersservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "committee-members-service" service endpoints.
type Endpoints struct {
	CreateCommitteeMember goa.Endpoint
	GetCommitteeMember    goa.Endpoint
	UpdateCommitteeMember goa.Endpoint
	DeleteCommitteeMember goa.Endpoint
}

// NewEndpoints wraps the methods of the "committee-members-service" service
// with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateCommitteeMember: NewCreateCommitteeMemberEndpoint(s, a.JWTAuth),
		GetCommitteeMember:    NewGetCommitteeMemberEndpoint(s, a.JWTAuth),
		UpdateCommitteeMember: NewUpdateCommitteeMemberEndpoint(s, a.JWTAuth),
		DeleteCommitteeMember: NewDeleteCommitteeMemberEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "committee-members-service"
// service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateCommitteeMember = m(e.CreateCommitteeMember)
	e.GetCommitteeMember = m(e.GetCommitteeMember)
	e.UpdateCommitteeMember = m(e.UpdateCommitteeMember)
	e.DeleteCommitteeMember = m(e.DeleteCommitteeMember)
}

// NewCreateCommitteeMemberEndpoint returns an endpoint function that calls the
// method "create-committee-member" of service "committee-members-service".
func NewCreateCommitteeMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateCommitteeMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateCommitteeMember(ctx, p)
	}
}

// NewGetCommitteeMemberEndpoint returns an endpoint function that calls the
// method "get-committee-member" of service "committee-members-service".
func NewGetCommitteeMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetCommitteeMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetCommitteeMember(ctx, p)
	}
}

// NewUpdateCommitteeMemberEndpoint returns an endpoint function that calls the
// method "update-committee-member" of service "committee-members-service".
func NewUpdateCommitteeMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateCommitteeMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateCommitteeMember(ctx, p)
	}
}

// NewDeleteCommitteeMemberEndpoint returns an endpoint function that calls the
// method "delete-committee-member" of service "committee-members-service".
func NewDeleteCommitteeMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteCommitteeMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteCommitteeMember(ctx, p)
	}
}
