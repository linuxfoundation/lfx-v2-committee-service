// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-members-service service
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package committeemembersservice

import (
	"context"

	"goa.design/goa/v3/security"
)

// Committee members management service
type Service interface {
	// Add a new member to a committee
	CreateCommitteeMember(context.Context, *CreateCommitteeMemberPayload) (res *CommitteeMemberFullWithReadonlyAttributes, err error)
	// Get a specific committee member by UID
	GetCommitteeMember(context.Context, *GetCommitteeMemberPayload) (res *GetCommitteeMemberResult, err error)
	// Replace an existing committee member (requires complete resource)
	UpdateCommitteeMember(context.Context, *UpdateCommitteeMemberPayload) (res *CommitteeMemberFullWithReadonlyAttributes, err error)
	// Remove a member from a committee
	DeleteCommitteeMember(context.Context, *DeleteCommitteeMemberPayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "committee"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "committee-members-service"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"create-committee-member", "get-committee-member", "update-committee-member", "delete-committee-member"}

// CommitteeMemberFullWithReadonlyAttributes is the result type of the
// committee-members-service service create-committee-member method.
type CommitteeMemberFullWithReadonlyAttributes struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string
	// User's LF ID
	Username *string
	// Primary email address
	Email *string
	// First name
	FirstName *string
	// Last name
	LastName *string
	// Job title at organization
	JobTitle *string
	// Committee role information
	Role *struct {
		// Committee role name
		Name string
		// Role start date
		StartDate *string
		// Role end date
		EndDate *string
	}
	// How the member was appointed
	AppointedBy string
	// Member status
	Status string
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string
		// Voting start date
		StartDate *string
		// Voting end date
		EndDate *string
	}
	// Government agency (for GAC members)
	Agency *string
	// Country (for GAC members)
	Country *string
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string
		// Organization website URL
		Website *string
	}
	// The timestamp when the resource was created (read-only)
	CreatedAt *string
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string
}

// CreateCommitteeMemberPayload is the payload type of the
// committee-members-service service create-committee-member method.
type CreateCommitteeMemberPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version string
	// Committee UID -- v2 uid, not related to v1 id directly
	UID string
	// User's LF ID
	Username *string
	// Primary email address
	Email string
	// First name
	FirstName *string
	// Last name
	LastName *string
	// Job title at organization
	JobTitle *string
	// Committee role information
	Role *struct {
		// Committee role name
		Name string
		// Role start date
		StartDate *string
		// Role end date
		EndDate *string
	}
	// How the member was appointed
	AppointedBy string
	// Member status
	Status string
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string
		// Voting start date
		StartDate *string
		// Voting end date
		EndDate *string
	}
	// Government agency (for GAC members)
	Agency *string
	// Country (for GAC members)
	Country *string
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string
		// Organization website URL
		Website *string
	}
}

// DeleteCommitteeMemberPayload is the payload type of the
// committee-members-service service delete-committee-member method.
type DeleteCommitteeMemberPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version string
	// If-Match header value for conditional requests
	IfMatch string
	// Committee UID -- v2 uid, not related to v1 id directly
	UID string
	// Committee member UID -- v2 uid, not related to v1 id directly
	MemberUID string
}

// GetCommitteeMemberPayload is the payload type of the
// committee-members-service service get-committee-member method.
type GetCommitteeMemberPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version string
	// Committee UID -- v2 uid, not related to v1 id directly
	UID string
	// Committee member UID -- v2 uid, not related to v1 id directly
	MemberUID string
}

// GetCommitteeMemberResult is the result type of the committee-members-service
// service get-committee-member method.
type GetCommitteeMemberResult struct {
	Member *CommitteeMemberFullWithReadonlyAttributes
	// ETag header value
	Etag *string
}

// UpdateCommitteeMemberPayload is the payload type of the
// committee-members-service service update-committee-member method.
type UpdateCommitteeMemberPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version string
	// If-Match header value for conditional requests
	IfMatch string
	// Committee UID -- v2 uid, not related to v1 id directly
	UID string
	// Committee member UID -- v2 uid, not related to v1 id directly
	MemberUID string
	// User's LF ID
	Username *string
	// Primary email address
	Email string
	// First name
	FirstName *string
	// Last name
	LastName *string
	// Job title at organization
	JobTitle *string
	// Committee role information
	Role *struct {
		// Committee role name
		Name string
		// Role start date
		StartDate *string
		// Role end date
		EndDate *string
	}
	// How the member was appointed
	AppointedBy string
	// Member status
	Status string
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string
		// Voting start date
		StartDate *string
		// Voting end date
		EndDate *string
	}
	// Government agency (for GAC members)
	Agency *string
	// Country (for GAC members)
	Country *string
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string
		// Organization website URL
		Website *string
	}
}

type BadRequestError struct {
	// Error message
	Message string
}

type ConflictError struct {
	// Error message
	Message string
}

type InternalServerError struct {
	// Error message
	Message string
}

type NotFoundError struct {
	// Error message
	Message string
}

type ServiceUnavailableError struct {
	// Error message
	Message string
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return ""
}

// ErrorName returns "bad-request-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "bad-request-error".
func (e *BadRequestError) GoaErrorName() string {
	return "BadRequest"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return ""
}

// ErrorName returns "conflict-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "conflict-error".
func (e *ConflictError) GoaErrorName() string {
	return "Conflict"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return ""
}

// ErrorName returns "internal-server-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal-server-error".
func (e *InternalServerError) GoaErrorName() string {
	return "InternalServerError"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "not-found-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not-found-error".
func (e *NotFoundError) GoaErrorName() string {
	return "NotFound"
}

// Error returns an error description.
func (e *ServiceUnavailableError) Error() string {
	return ""
}

// ErrorName returns "service-unavailable-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ServiceUnavailableError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "service-unavailable-error".
func (e *ServiceUnavailableError) GoaErrorName() string {
	return "ServiceUnavailable"
}
