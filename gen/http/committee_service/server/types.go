// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-service HTTP server types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package server

import (
	"unicode/utf8"

	committeeservice "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateCommitteeRequestBody is the type of the "committee-service" service
// "create-committee" endpoint HTTP request body.
type CreateCommitteeRequestBody struct {
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether this committee is expected to be reviewed
	RequiresReview *bool `form:"requires_review,omitempty" json:"requires_review,omitempty" xml:"requires_review,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this committee
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// UpdateCommitteeBaseRequestBody is the type of the "committee-service"
// service "update-committee-base" endpoint HTTP request body.
type UpdateCommitteeBaseRequestBody struct {
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether this committee is expected to be reviewed
	RequiresReview *bool `form:"requires_review,omitempty" json:"requires_review,omitempty" xml:"requires_review,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
}

// UpdateCommitteeSettingsRequestBody is the type of the "committee-service"
// service "update-committee-settings" endpoint HTTP request body.
type UpdateCommitteeSettingsRequestBody struct {
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this committee
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateCommitteeMemberRequestBody is the type of the "committee-service"
// service "create-committee-member" endpoint HTTP request body.
type CreateCommitteeMemberRequestBody struct {
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name *string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy *string `form:"appointed_by,omitempty" json:"appointed_by,omitempty" xml:"appointed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status *string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
}

// UpdateCommitteeMemberRequestBody is the type of the "committee-service"
// service "update-committee-member" endpoint HTTP request body.
type UpdateCommitteeMemberRequestBody struct {
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name *string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy *string `form:"appointed_by,omitempty" json:"appointed_by,omitempty" xml:"appointed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status *string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
}

// CreateCommitteeResponseBody is the type of the "committee-service" service
// "create-committee" endpoint HTTP response body.
type CreateCommitteeResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether this committee is expected to be reviewed
	RequiresReview bool `form:"requires_review" json:"requires_review" xml:"requires_review"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The name of the SSO group - read-only
	SsoGroupName *string `form:"sso_group_name,omitempty" json:"sso_group_name,omitempty" xml:"sso_group_name,omitempty"`
	// The total number of members in this committee
	TotalMembers *int `form:"total_members,omitempty" json:"total_members,omitempty" xml:"total_members,omitempty"`
	// The total number of repositories with voting permissions for this committee
	TotalVotingRepos *int `form:"total_voting_repos,omitempty" json:"total_voting_repos,omitempty" xml:"total_voting_repos,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired bool `form:"business_email_required" json:"business_email_required" xml:"business_email_required"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this committee
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetCommitteeBaseResponseBody is the type of the "committee-service" service
// "get-committee-base" endpoint HTTP response body.
type GetCommitteeBaseResponseBody CommitteeBaseWithReadonlyAttributesResponseBody

// UpdateCommitteeBaseResponseBody is the type of the "committee-service"
// service "update-committee-base" endpoint HTTP response body.
type UpdateCommitteeBaseResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether this committee is expected to be reviewed
	RequiresReview bool `form:"requires_review" json:"requires_review" xml:"requires_review"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The name of the project this committee belongs to
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The name of the SSO group - read-only
	SsoGroupName *string `form:"sso_group_name,omitempty" json:"sso_group_name,omitempty" xml:"sso_group_name,omitempty"`
	// The total number of members in this committee
	TotalMembers *int `form:"total_members,omitempty" json:"total_members,omitempty" xml:"total_members,omitempty"`
	// The total number of repositories with voting permissions for this committee
	TotalVotingRepos *int `form:"total_voting_repos,omitempty" json:"total_voting_repos,omitempty" xml:"total_voting_repos,omitempty"`
}

// GetCommitteeSettingsResponseBody is the type of the "committee-service"
// service "get-committee-settings" endpoint HTTP response body.
type GetCommitteeSettingsResponseBody CommitteeSettingsWithReadonlyAttributesResponseBody

// UpdateCommitteeSettingsResponseBody is the type of the "committee-service"
// service "update-committee-settings" endpoint HTTP response body.
type UpdateCommitteeSettingsResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired bool `form:"business_email_required" json:"business_email_required" xml:"business_email_required"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateCommitteeMemberResponseBody is the type of the "committee-service"
// service "create-committee-member" endpoint HTTP response body.
type CreateCommitteeMemberResponseBody struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Committee UID -- v2 uid, not related to v1 id directly
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// The name of the committee this member belongs to
	CommitteeName *string `form:"committee_name,omitempty" json:"committee_name,omitempty" xml:"committee_name,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy string `form:"appointed_by" json:"appointed_by" xml:"appointed_by"`
	// Member status
	Status string `form:"status" json:"status" xml:"status"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetCommitteeMemberResponseBody is the type of the "committee-service"
// service "get-committee-member" endpoint HTTP response body.
type GetCommitteeMemberResponseBody CommitteeMemberFullWithReadonlyAttributesResponseBody

// UpdateCommitteeMemberResponseBody is the type of the "committee-service"
// service "update-committee-member" endpoint HTTP response body.
type UpdateCommitteeMemberResponseBody struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Committee UID -- v2 uid, not related to v1 id directly
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// The name of the committee this member belongs to
	CommitteeName *string `form:"committee_name,omitempty" json:"committee_name,omitempty" xml:"committee_name,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy string `form:"appointed_by" json:"appointed_by" xml:"appointed_by"`
	// Member status
	Status string `form:"status" json:"status" xml:"status"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateCommitteeBadRequestResponseBody is the type of the "committee-service"
// service "create-committee" endpoint HTTP response body for the "BadRequest"
// error.
type CreateCommitteeBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeConflictResponseBody is the type of the "committee-service"
// service "create-committee" endpoint HTTP response body for the "Conflict"
// error.
type CreateCommitteeConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeInternalServerErrorResponseBody is the type of the
// "committee-service" service "create-committee" endpoint HTTP response body
// for the "InternalServerError" error.
type CreateCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeNotFoundResponseBody is the type of the "committee-service"
// service "create-committee" endpoint HTTP response body for the "NotFound"
// error.
type CreateCommitteeNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeServiceUnavailableResponseBody is the type of the
// "committee-service" service "create-committee" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type CreateCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeBaseInternalServerErrorResponseBody is the type of the
// "committee-service" service "get-committee-base" endpoint HTTP response body
// for the "InternalServerError" error.
type GetCommitteeBaseInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeBaseNotFoundResponseBody is the type of the "committee-service"
// service "get-committee-base" endpoint HTTP response body for the "NotFound"
// error.
type GetCommitteeBaseNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeBaseServiceUnavailableResponseBody is the type of the
// "committee-service" service "get-committee-base" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type GetCommitteeBaseServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeBaseBadRequestResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "BadRequest" error.
type UpdateCommitteeBaseBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeBaseConflictResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "Conflict" error.
type UpdateCommitteeBaseConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeBaseInternalServerErrorResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateCommitteeBaseInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeBaseNotFoundResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "NotFound" error.
type UpdateCommitteeBaseNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeBaseServiceUnavailableResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateCommitteeBaseServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeBadRequestResponseBody is the type of the "committee-service"
// service "delete-committee" endpoint HTTP response body for the "BadRequest"
// error.
type DeleteCommitteeBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeConflictResponseBody is the type of the "committee-service"
// service "delete-committee" endpoint HTTP response body for the "Conflict"
// error.
type DeleteCommitteeConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeInternalServerErrorResponseBody is the type of the
// "committee-service" service "delete-committee" endpoint HTTP response body
// for the "InternalServerError" error.
type DeleteCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeNotFoundResponseBody is the type of the "committee-service"
// service "delete-committee" endpoint HTTP response body for the "NotFound"
// error.
type DeleteCommitteeNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeServiceUnavailableResponseBody is the type of the
// "committee-service" service "delete-committee" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type DeleteCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeSettingsInternalServerErrorResponseBody is the type of the
// "committee-service" service "get-committee-settings" endpoint HTTP response
// body for the "InternalServerError" error.
type GetCommitteeSettingsInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeSettingsNotFoundResponseBody is the type of the
// "committee-service" service "get-committee-settings" endpoint HTTP response
// body for the "NotFound" error.
type GetCommitteeSettingsNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeSettingsServiceUnavailableResponseBody is the type of the
// "committee-service" service "get-committee-settings" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetCommitteeSettingsServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeSettingsBadRequestResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "BadRequest" error.
type UpdateCommitteeSettingsBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeSettingsConflictResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "Conflict" error.
type UpdateCommitteeSettingsConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeSettingsInternalServerErrorResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "InternalServerError" error.
type UpdateCommitteeSettingsInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeSettingsNotFoundResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "NotFound" error.
type UpdateCommitteeSettingsNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeSettingsServiceUnavailableResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type UpdateCommitteeSettingsServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "committee-service"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeMemberBadRequestResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "BadRequest" error.
type CreateCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeMemberConflictResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "Conflict" error.
type CreateCommitteeMemberConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "InternalServerError" error.
type CreateCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeMemberNotFoundResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "NotFound" error.
type CreateCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type CreateCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeMemberBadRequestResponseBody is the type of the
// "committee-service" service "get-committee-member" endpoint HTTP response
// body for the "BadRequest" error.
type GetCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-service" service "get-committee-member" endpoint HTTP response
// body for the "InternalServerError" error.
type GetCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeMemberNotFoundResponseBody is the type of the
// "committee-service" service "get-committee-member" endpoint HTTP response
// body for the "NotFound" error.
type GetCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-service" service "get-committee-member" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberBadRequestResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "BadRequest" error.
type UpdateCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberConflictResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "Conflict" error.
type UpdateCommitteeMemberConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberNotFoundResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "NotFound" error.
type UpdateCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberBadRequestResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "BadRequest" error.
type DeleteCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberConflictResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "Conflict" error.
type DeleteCommitteeMemberConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "InternalServerError" error.
type DeleteCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberNotFoundResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "NotFound" error.
type DeleteCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type DeleteCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CommitteeBaseWithReadonlyAttributesResponseBody is used to define fields on
// response body types.
type CommitteeBaseWithReadonlyAttributesResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether this committee is expected to be reviewed
	RequiresReview bool `form:"requires_review" json:"requires_review" xml:"requires_review"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The name of the project this committee belongs to
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The name of the SSO group - read-only
	SsoGroupName *string `form:"sso_group_name,omitempty" json:"sso_group_name,omitempty" xml:"sso_group_name,omitempty"`
	// The total number of members in this committee
	TotalMembers *int `form:"total_members,omitempty" json:"total_members,omitempty" xml:"total_members,omitempty"`
	// The total number of repositories with voting permissions for this committee
	TotalVotingRepos *int `form:"total_voting_repos,omitempty" json:"total_voting_repos,omitempty" xml:"total_voting_repos,omitempty"`
}

// CommitteeSettingsWithReadonlyAttributesResponseBody is used to define fields
// on response body types.
type CommitteeSettingsWithReadonlyAttributesResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired bool `form:"business_email_required" json:"business_email_required" xml:"business_email_required"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CommitteeMemberFullWithReadonlyAttributesResponseBody is used to define
// fields on response body types.
type CommitteeMemberFullWithReadonlyAttributesResponseBody struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Committee UID -- v2 uid, not related to v1 id directly
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// The name of the committee this member belongs to
	CommitteeName *string `form:"committee_name,omitempty" json:"committee_name,omitempty" xml:"committee_name,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy string `form:"appointed_by" json:"appointed_by" xml:"appointed_by"`
	// Member status
	Status string `form:"status" json:"status" xml:"status"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateCommitteeResponseBody builds the HTTP response body from the result
// of the "create-committee" endpoint of the "committee-service" service.
func NewCreateCommitteeResponseBody(res *committeeservice.CommitteeFullWithReadonlyAttributes) *CreateCommitteeResponseBody {
	body := &CreateCommitteeResponseBody{
		UID:                   res.UID,
		ProjectUID:            res.ProjectUID,
		Name:                  res.Name,
		Category:              res.Category,
		Description:           res.Description,
		Website:               res.Website,
		EnableVoting:          res.EnableVoting,
		SsoGroupEnabled:       res.SsoGroupEnabled,
		RequiresReview:        res.RequiresReview,
		Public:                res.Public,
		DisplayName:           res.DisplayName,
		ParentUID:             res.ParentUID,
		SsoGroupName:          res.SsoGroupName,
		TotalMembers:          res.TotalMembers,
		TotalVotingRepos:      res.TotalVotingRepos,
		BusinessEmailRequired: res.BusinessEmailRequired,
		LastReviewedAt:        res.LastReviewedAt,
		LastReviewedBy:        res.LastReviewedBy,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.RequiresReview == zero {
			body.RequiresReview = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if res.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: res.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	{
		var zero bool
		if body.BusinessEmailRequired == zero {
			body.BusinessEmailRequired = false
		}
	}
	if res.Writers != nil {
		body.Writers = make([]string, len(res.Writers))
		for i, val := range res.Writers {
			body.Writers[i] = val
		}
	}
	if res.Auditors != nil {
		body.Auditors = make([]string, len(res.Auditors))
		for i, val := range res.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewGetCommitteeBaseResponseBody builds the HTTP response body from the
// result of the "get-committee-base" endpoint of the "committee-service"
// service.
func NewGetCommitteeBaseResponseBody(res *committeeservice.GetCommitteeBaseResult) *GetCommitteeBaseResponseBody {
	body := &GetCommitteeBaseResponseBody{
		UID:              res.CommitteeBase.UID,
		ProjectUID:       res.CommitteeBase.ProjectUID,
		Name:             res.CommitteeBase.Name,
		Category:         res.CommitteeBase.Category,
		Description:      res.CommitteeBase.Description,
		Website:          res.CommitteeBase.Website,
		EnableVoting:     res.CommitteeBase.EnableVoting,
		SsoGroupEnabled:  res.CommitteeBase.SsoGroupEnabled,
		RequiresReview:   res.CommitteeBase.RequiresReview,
		Public:           res.CommitteeBase.Public,
		DisplayName:      res.CommitteeBase.DisplayName,
		ParentUID:        res.CommitteeBase.ParentUID,
		ProjectName:      res.CommitteeBase.ProjectName,
		SsoGroupName:     res.CommitteeBase.SsoGroupName,
		TotalMembers:     res.CommitteeBase.TotalMembers,
		TotalVotingRepos: res.CommitteeBase.TotalVotingRepos,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.RequiresReview == zero {
			body.RequiresReview = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if res.CommitteeBase.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: res.CommitteeBase.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	return body
}

// NewUpdateCommitteeBaseResponseBody builds the HTTP response body from the
// result of the "update-committee-base" endpoint of the "committee-service"
// service.
func NewUpdateCommitteeBaseResponseBody(res *committeeservice.CommitteeBaseWithReadonlyAttributes) *UpdateCommitteeBaseResponseBody {
	body := &UpdateCommitteeBaseResponseBody{
		UID:              res.UID,
		ProjectUID:       res.ProjectUID,
		Name:             res.Name,
		Category:         res.Category,
		Description:      res.Description,
		Website:          res.Website,
		EnableVoting:     res.EnableVoting,
		SsoGroupEnabled:  res.SsoGroupEnabled,
		RequiresReview:   res.RequiresReview,
		Public:           res.Public,
		DisplayName:      res.DisplayName,
		ParentUID:        res.ParentUID,
		ProjectName:      res.ProjectName,
		SsoGroupName:     res.SsoGroupName,
		TotalMembers:     res.TotalMembers,
		TotalVotingRepos: res.TotalVotingRepos,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.RequiresReview == zero {
			body.RequiresReview = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if res.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: res.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	return body
}

// NewGetCommitteeSettingsResponseBody builds the HTTP response body from the
// result of the "get-committee-settings" endpoint of the "committee-service"
// service.
func NewGetCommitteeSettingsResponseBody(res *committeeservice.GetCommitteeSettingsResult) *GetCommitteeSettingsResponseBody {
	body := &GetCommitteeSettingsResponseBody{
		UID:                   res.CommitteeSettings.UID,
		BusinessEmailRequired: res.CommitteeSettings.BusinessEmailRequired,
		LastReviewedAt:        res.CommitteeSettings.LastReviewedAt,
		LastReviewedBy:        res.CommitteeSettings.LastReviewedBy,
		CreatedAt:             res.CommitteeSettings.CreatedAt,
		UpdatedAt:             res.CommitteeSettings.UpdatedAt,
	}
	{
		var zero bool
		if body.BusinessEmailRequired == zero {
			body.BusinessEmailRequired = false
		}
	}
	return body
}

// NewUpdateCommitteeSettingsResponseBody builds the HTTP response body from
// the result of the "update-committee-settings" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeSettingsResponseBody(res *committeeservice.CommitteeSettingsWithReadonlyAttributes) *UpdateCommitteeSettingsResponseBody {
	body := &UpdateCommitteeSettingsResponseBody{
		UID:                   res.UID,
		BusinessEmailRequired: res.BusinessEmailRequired,
		LastReviewedAt:        res.LastReviewedAt,
		LastReviewedBy:        res.LastReviewedBy,
		CreatedAt:             res.CreatedAt,
		UpdatedAt:             res.UpdatedAt,
	}
	{
		var zero bool
		if body.BusinessEmailRequired == zero {
			body.BusinessEmailRequired = false
		}
	}
	return body
}

// NewCreateCommitteeMemberResponseBody builds the HTTP response body from the
// result of the "create-committee-member" endpoint of the "committee-service"
// service.
func NewCreateCommitteeMemberResponseBody(res *committeeservice.CommitteeMemberFullWithReadonlyAttributes) *CreateCommitteeMemberResponseBody {
	body := &CreateCommitteeMemberResponseBody{
		UID:           res.UID,
		CommitteeUID:  res.CommitteeUID,
		CommitteeName: res.CommitteeName,
		Username:      res.Username,
		Email:         res.Email,
		FirstName:     res.FirstName,
		LastName:      res.LastName,
		JobTitle:      res.JobTitle,
		AppointedBy:   res.AppointedBy,
		Status:        res.Status,
		Agency:        res.Agency,
		Country:       res.Country,
		CreatedAt:     res.CreatedAt,
		UpdatedAt:     res.UpdatedAt,
	}
	if res.Role != nil {
		body.Role = &struct {
			// Committee role name
			Name string `form:"name" json:"name" xml:"name"`
			// Role start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Role end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Name:      res.Role.Name,
			StartDate: res.Role.StartDate,
			EndDate:   res.Role.EndDate,
		}
		{
			var zero string
			if body.Role.Name == zero {
				body.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if body.AppointedBy == zero {
			body.AppointedBy = "None"
		}
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "Active"
		}
	}
	if res.Voting != nil {
		body.Voting = &struct {
			// Voting status
			Status string `form:"status" json:"status" xml:"status"`
			// Voting start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Voting end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Status:    res.Voting.Status,
			StartDate: res.Voting.StartDate,
			EndDate:   res.Voting.EndDate,
		}
		{
			var zero string
			if body.Voting.Status == zero {
				body.Voting.Status = "None"
			}
		}
	}
	if res.Organization != nil {
		body.Organization = &struct {
			// Organization name
			Name *string `form:"name" json:"name" xml:"name"`
			// Organization website URL
			Website *string `form:"website" json:"website" xml:"website"`
		}{
			Name:    res.Organization.Name,
			Website: res.Organization.Website,
		}
	}
	return body
}

// NewGetCommitteeMemberResponseBody builds the HTTP response body from the
// result of the "get-committee-member" endpoint of the "committee-service"
// service.
func NewGetCommitteeMemberResponseBody(res *committeeservice.GetCommitteeMemberResult) *GetCommitteeMemberResponseBody {
	body := &GetCommitteeMemberResponseBody{
		UID:           res.Member.UID,
		CommitteeUID:  res.Member.CommitteeUID,
		CommitteeName: res.Member.CommitteeName,
		Username:      res.Member.Username,
		Email:         res.Member.Email,
		FirstName:     res.Member.FirstName,
		LastName:      res.Member.LastName,
		JobTitle:      res.Member.JobTitle,
		AppointedBy:   res.Member.AppointedBy,
		Status:        res.Member.Status,
		Agency:        res.Member.Agency,
		Country:       res.Member.Country,
		CreatedAt:     res.Member.CreatedAt,
		UpdatedAt:     res.Member.UpdatedAt,
	}
	if res.Member.Role != nil {
		body.Role = &struct {
			// Committee role name
			Name string `form:"name" json:"name" xml:"name"`
			// Role start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Role end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Name:      res.Member.Role.Name,
			StartDate: res.Member.Role.StartDate,
			EndDate:   res.Member.Role.EndDate,
		}
		{
			var zero string
			if body.Role.Name == zero {
				body.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if body.AppointedBy == zero {
			body.AppointedBy = "None"
		}
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "Active"
		}
	}
	if res.Member.Voting != nil {
		body.Voting = &struct {
			// Voting status
			Status string `form:"status" json:"status" xml:"status"`
			// Voting start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Voting end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Status:    res.Member.Voting.Status,
			StartDate: res.Member.Voting.StartDate,
			EndDate:   res.Member.Voting.EndDate,
		}
		{
			var zero string
			if body.Voting.Status == zero {
				body.Voting.Status = "None"
			}
		}
	}
	if res.Member.Organization != nil {
		body.Organization = &struct {
			// Organization name
			Name *string `form:"name" json:"name" xml:"name"`
			// Organization website URL
			Website *string `form:"website" json:"website" xml:"website"`
		}{
			Name:    res.Member.Organization.Name,
			Website: res.Member.Organization.Website,
		}
	}
	return body
}

// NewUpdateCommitteeMemberResponseBody builds the HTTP response body from the
// result of the "update-committee-member" endpoint of the "committee-service"
// service.
func NewUpdateCommitteeMemberResponseBody(res *committeeservice.CommitteeMemberFullWithReadonlyAttributes) *UpdateCommitteeMemberResponseBody {
	body := &UpdateCommitteeMemberResponseBody{
		UID:           res.UID,
		CommitteeUID:  res.CommitteeUID,
		CommitteeName: res.CommitteeName,
		Username:      res.Username,
		Email:         res.Email,
		FirstName:     res.FirstName,
		LastName:      res.LastName,
		JobTitle:      res.JobTitle,
		AppointedBy:   res.AppointedBy,
		Status:        res.Status,
		Agency:        res.Agency,
		Country:       res.Country,
		CreatedAt:     res.CreatedAt,
		UpdatedAt:     res.UpdatedAt,
	}
	if res.Role != nil {
		body.Role = &struct {
			// Committee role name
			Name string `form:"name" json:"name" xml:"name"`
			// Role start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Role end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Name:      res.Role.Name,
			StartDate: res.Role.StartDate,
			EndDate:   res.Role.EndDate,
		}
		{
			var zero string
			if body.Role.Name == zero {
				body.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if body.AppointedBy == zero {
			body.AppointedBy = "None"
		}
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "Active"
		}
	}
	if res.Voting != nil {
		body.Voting = &struct {
			// Voting status
			Status string `form:"status" json:"status" xml:"status"`
			// Voting start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Voting end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Status:    res.Voting.Status,
			StartDate: res.Voting.StartDate,
			EndDate:   res.Voting.EndDate,
		}
		{
			var zero string
			if body.Voting.Status == zero {
				body.Voting.Status = "None"
			}
		}
	}
	if res.Organization != nil {
		body.Organization = &struct {
			// Organization name
			Name *string `form:"name" json:"name" xml:"name"`
			// Organization website URL
			Website *string `form:"website" json:"website" xml:"website"`
		}{
			Name:    res.Organization.Name,
			Website: res.Organization.Website,
		}
	}
	return body
}

// NewCreateCommitteeBadRequestResponseBody builds the HTTP response body from
// the result of the "create-committee" endpoint of the "committee-service"
// service.
func NewCreateCommitteeBadRequestResponseBody(res *committeeservice.BadRequestError) *CreateCommitteeBadRequestResponseBody {
	body := &CreateCommitteeBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeConflictResponseBody builds the HTTP response body from
// the result of the "create-committee" endpoint of the "committee-service"
// service.
func NewCreateCommitteeConflictResponseBody(res *committeeservice.ConflictError) *CreateCommitteeConflictResponseBody {
	body := &CreateCommitteeConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "create-committee" endpoint of the
// "committee-service" service.
func NewCreateCommitteeInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *CreateCommitteeInternalServerErrorResponseBody {
	body := &CreateCommitteeInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeNotFoundResponseBody builds the HTTP response body from
// the result of the "create-committee" endpoint of the "committee-service"
// service.
func NewCreateCommitteeNotFoundResponseBody(res *committeeservice.NotFoundError) *CreateCommitteeNotFoundResponseBody {
	body := &CreateCommitteeNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "create-committee" endpoint of the
// "committee-service" service.
func NewCreateCommitteeServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *CreateCommitteeServiceUnavailableResponseBody {
	body := &CreateCommitteeServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeBaseInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "get-committee-base" endpoint of the
// "committee-service" service.
func NewGetCommitteeBaseInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *GetCommitteeBaseInternalServerErrorResponseBody {
	body := &GetCommitteeBaseInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeBaseNotFoundResponseBody builds the HTTP response body from
// the result of the "get-committee-base" endpoint of the "committee-service"
// service.
func NewGetCommitteeBaseNotFoundResponseBody(res *committeeservice.NotFoundError) *GetCommitteeBaseNotFoundResponseBody {
	body := &GetCommitteeBaseNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeBaseServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "get-committee-base" endpoint of the
// "committee-service" service.
func NewGetCommitteeBaseServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *GetCommitteeBaseServiceUnavailableResponseBody {
	body := &GetCommitteeBaseServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeBaseBadRequestResponseBody builds the HTTP response body
// from the result of the "update-committee-base" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeBaseBadRequestResponseBody(res *committeeservice.BadRequestError) *UpdateCommitteeBaseBadRequestResponseBody {
	body := &UpdateCommitteeBaseBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeBaseConflictResponseBody builds the HTTP response body
// from the result of the "update-committee-base" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeBaseConflictResponseBody(res *committeeservice.ConflictError) *UpdateCommitteeBaseConflictResponseBody {
	body := &UpdateCommitteeBaseConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeBaseInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "update-committee-base" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeBaseInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *UpdateCommitteeBaseInternalServerErrorResponseBody {
	body := &UpdateCommitteeBaseInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeBaseNotFoundResponseBody builds the HTTP response body
// from the result of the "update-committee-base" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeBaseNotFoundResponseBody(res *committeeservice.NotFoundError) *UpdateCommitteeBaseNotFoundResponseBody {
	body := &UpdateCommitteeBaseNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeBaseServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "update-committee-base" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeBaseServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *UpdateCommitteeBaseServiceUnavailableResponseBody {
	body := &UpdateCommitteeBaseServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeBadRequestResponseBody builds the HTTP response body from
// the result of the "delete-committee" endpoint of the "committee-service"
// service.
func NewDeleteCommitteeBadRequestResponseBody(res *committeeservice.BadRequestError) *DeleteCommitteeBadRequestResponseBody {
	body := &DeleteCommitteeBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeConflictResponseBody builds the HTTP response body from
// the result of the "delete-committee" endpoint of the "committee-service"
// service.
func NewDeleteCommitteeConflictResponseBody(res *committeeservice.ConflictError) *DeleteCommitteeConflictResponseBody {
	body := &DeleteCommitteeConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "delete-committee" endpoint of the
// "committee-service" service.
func NewDeleteCommitteeInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *DeleteCommitteeInternalServerErrorResponseBody {
	body := &DeleteCommitteeInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeNotFoundResponseBody builds the HTTP response body from
// the result of the "delete-committee" endpoint of the "committee-service"
// service.
func NewDeleteCommitteeNotFoundResponseBody(res *committeeservice.NotFoundError) *DeleteCommitteeNotFoundResponseBody {
	body := &DeleteCommitteeNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "delete-committee" endpoint of the
// "committee-service" service.
func NewDeleteCommitteeServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *DeleteCommitteeServiceUnavailableResponseBody {
	body := &DeleteCommitteeServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeSettingsInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "get-committee-settings" endpoint of
// the "committee-service" service.
func NewGetCommitteeSettingsInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *GetCommitteeSettingsInternalServerErrorResponseBody {
	body := &GetCommitteeSettingsInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeSettingsNotFoundResponseBody builds the HTTP response body
// from the result of the "get-committee-settings" endpoint of the
// "committee-service" service.
func NewGetCommitteeSettingsNotFoundResponseBody(res *committeeservice.NotFoundError) *GetCommitteeSettingsNotFoundResponseBody {
	body := &GetCommitteeSettingsNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeSettingsServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "get-committee-settings" endpoint of
// the "committee-service" service.
func NewGetCommitteeSettingsServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *GetCommitteeSettingsServiceUnavailableResponseBody {
	body := &GetCommitteeSettingsServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeSettingsBadRequestResponseBody builds the HTTP response
// body from the result of the "update-committee-settings" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeSettingsBadRequestResponseBody(res *committeeservice.BadRequestError) *UpdateCommitteeSettingsBadRequestResponseBody {
	body := &UpdateCommitteeSettingsBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeSettingsConflictResponseBody builds the HTTP response body
// from the result of the "update-committee-settings" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeSettingsConflictResponseBody(res *committeeservice.ConflictError) *UpdateCommitteeSettingsConflictResponseBody {
	body := &UpdateCommitteeSettingsConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeSettingsInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "update-committee-settings" endpoint of
// the "committee-service" service.
func NewUpdateCommitteeSettingsInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *UpdateCommitteeSettingsInternalServerErrorResponseBody {
	body := &UpdateCommitteeSettingsInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeSettingsNotFoundResponseBody builds the HTTP response body
// from the result of the "update-committee-settings" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeSettingsNotFoundResponseBody(res *committeeservice.NotFoundError) *UpdateCommitteeSettingsNotFoundResponseBody {
	body := &UpdateCommitteeSettingsNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeSettingsServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "update-committee-settings" endpoint of
// the "committee-service" service.
func NewUpdateCommitteeSettingsServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *UpdateCommitteeSettingsServiceUnavailableResponseBody {
	body := &UpdateCommitteeSettingsServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewReadyzServiceUnavailableResponseBody builds the HTTP response body from
// the result of the "readyz" endpoint of the "committee-service" service.
func NewReadyzServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *ReadyzServiceUnavailableResponseBody {
	body := &ReadyzServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberBadRequestResponseBody builds the HTTP response body
// from the result of the "create-committee-member" endpoint of the
// "committee-service" service.
func NewCreateCommitteeMemberBadRequestResponseBody(res *committeeservice.BadRequestError) *CreateCommitteeMemberBadRequestResponseBody {
	body := &CreateCommitteeMemberBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberConflictResponseBody builds the HTTP response body
// from the result of the "create-committee-member" endpoint of the
// "committee-service" service.
func NewCreateCommitteeMemberConflictResponseBody(res *committeeservice.ConflictError) *CreateCommitteeMemberConflictResponseBody {
	body := &CreateCommitteeMemberConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "create-committee-member" endpoint of
// the "committee-service" service.
func NewCreateCommitteeMemberInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *CreateCommitteeMemberInternalServerErrorResponseBody {
	body := &CreateCommitteeMemberInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberNotFoundResponseBody builds the HTTP response body
// from the result of the "create-committee-member" endpoint of the
// "committee-service" service.
func NewCreateCommitteeMemberNotFoundResponseBody(res *committeeservice.NotFoundError) *CreateCommitteeMemberNotFoundResponseBody {
	body := &CreateCommitteeMemberNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "create-committee-member" endpoint of
// the "committee-service" service.
func NewCreateCommitteeMemberServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *CreateCommitteeMemberServiceUnavailableResponseBody {
	body := &CreateCommitteeMemberServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeMemberBadRequestResponseBody builds the HTTP response body
// from the result of the "get-committee-member" endpoint of the
// "committee-service" service.
func NewGetCommitteeMemberBadRequestResponseBody(res *committeeservice.BadRequestError) *GetCommitteeMemberBadRequestResponseBody {
	body := &GetCommitteeMemberBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeMemberInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "get-committee-member" endpoint of the
// "committee-service" service.
func NewGetCommitteeMemberInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *GetCommitteeMemberInternalServerErrorResponseBody {
	body := &GetCommitteeMemberInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeMemberNotFoundResponseBody builds the HTTP response body from
// the result of the "get-committee-member" endpoint of the "committee-service"
// service.
func NewGetCommitteeMemberNotFoundResponseBody(res *committeeservice.NotFoundError) *GetCommitteeMemberNotFoundResponseBody {
	body := &GetCommitteeMemberNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeMemberServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "get-committee-member" endpoint of the
// "committee-service" service.
func NewGetCommitteeMemberServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *GetCommitteeMemberServiceUnavailableResponseBody {
	body := &GetCommitteeMemberServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberBadRequestResponseBody builds the HTTP response body
// from the result of the "update-committee-member" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeMemberBadRequestResponseBody(res *committeeservice.BadRequestError) *UpdateCommitteeMemberBadRequestResponseBody {
	body := &UpdateCommitteeMemberBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberConflictResponseBody builds the HTTP response body
// from the result of the "update-committee-member" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeMemberConflictResponseBody(res *committeeservice.ConflictError) *UpdateCommitteeMemberConflictResponseBody {
	body := &UpdateCommitteeMemberConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "update-committee-member" endpoint of
// the "committee-service" service.
func NewUpdateCommitteeMemberInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *UpdateCommitteeMemberInternalServerErrorResponseBody {
	body := &UpdateCommitteeMemberInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberNotFoundResponseBody builds the HTTP response body
// from the result of the "update-committee-member" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeMemberNotFoundResponseBody(res *committeeservice.NotFoundError) *UpdateCommitteeMemberNotFoundResponseBody {
	body := &UpdateCommitteeMemberNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "update-committee-member" endpoint of
// the "committee-service" service.
func NewUpdateCommitteeMemberServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *UpdateCommitteeMemberServiceUnavailableResponseBody {
	body := &UpdateCommitteeMemberServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberBadRequestResponseBody builds the HTTP response body
// from the result of the "delete-committee-member" endpoint of the
// "committee-service" service.
func NewDeleteCommitteeMemberBadRequestResponseBody(res *committeeservice.BadRequestError) *DeleteCommitteeMemberBadRequestResponseBody {
	body := &DeleteCommitteeMemberBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberConflictResponseBody builds the HTTP response body
// from the result of the "delete-committee-member" endpoint of the
// "committee-service" service.
func NewDeleteCommitteeMemberConflictResponseBody(res *committeeservice.ConflictError) *DeleteCommitteeMemberConflictResponseBody {
	body := &DeleteCommitteeMemberConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "delete-committee-member" endpoint of
// the "committee-service" service.
func NewDeleteCommitteeMemberInternalServerErrorResponseBody(res *committeeservice.InternalServerError) *DeleteCommitteeMemberInternalServerErrorResponseBody {
	body := &DeleteCommitteeMemberInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberNotFoundResponseBody builds the HTTP response body
// from the result of the "delete-committee-member" endpoint of the
// "committee-service" service.
func NewDeleteCommitteeMemberNotFoundResponseBody(res *committeeservice.NotFoundError) *DeleteCommitteeMemberNotFoundResponseBody {
	body := &DeleteCommitteeMemberNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "delete-committee-member" endpoint of
// the "committee-service" service.
func NewDeleteCommitteeMemberServiceUnavailableResponseBody(res *committeeservice.ServiceUnavailableError) *DeleteCommitteeMemberServiceUnavailableResponseBody {
	body := &DeleteCommitteeMemberServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteePayload builds a committee-service service
// create-committee endpoint payload.
func NewCreateCommitteePayload(body *CreateCommitteeRequestBody, version *string, bearerToken *string) *committeeservice.CreateCommitteePayload {
	v := &committeeservice.CreateCommitteePayload{
		ProjectUID:     *body.ProjectUID,
		Name:           *body.Name,
		Category:       *body.Category,
		Description:    body.Description,
		Website:        body.Website,
		DisplayName:    body.DisplayName,
		ParentUID:      body.ParentUID,
		LastReviewedAt: body.LastReviewedAt,
		LastReviewedBy: body.LastReviewedBy,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.RequiresReview != nil {
		v.RequiresReview = *body.RequiresReview
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.BusinessEmailRequired != nil {
		v.BusinessEmailRequired = *body.BusinessEmailRequired
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.RequiresReview == nil {
		v.RequiresReview = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}
	if body.BusinessEmailRequired == nil {
		v.BusinessEmailRequired = false
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewGetCommitteeBasePayload builds a committee-service service
// get-committee-base endpoint payload.
func NewGetCommitteeBasePayload(uid string, version *string, bearerToken *string) *committeeservice.GetCommitteeBasePayload {
	v := &committeeservice.GetCommitteeBasePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewUpdateCommitteeBasePayload builds a committee-service service
// update-committee-base endpoint payload.
func NewUpdateCommitteeBasePayload(body *UpdateCommitteeBaseRequestBody, uid string, version *string, bearerToken *string, ifMatch *string) *committeeservice.UpdateCommitteeBasePayload {
	v := &committeeservice.UpdateCommitteeBasePayload{
		ProjectUID:  *body.ProjectUID,
		Name:        *body.Name,
		Category:    *body.Category,
		Description: body.Description,
		Website:     body.Website,
		DisplayName: body.DisplayName,
		ParentUID:   body.ParentUID,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.RequiresReview != nil {
		v.RequiresReview = *body.RequiresReview
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.RequiresReview == nil {
		v.RequiresReview = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v
}

// NewDeleteCommitteePayload builds a committee-service service
// delete-committee endpoint payload.
func NewDeleteCommitteePayload(uid string, version *string, bearerToken *string, ifMatch *string) *committeeservice.DeleteCommitteePayload {
	v := &committeeservice.DeleteCommitteePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v
}

// NewGetCommitteeSettingsPayload builds a committee-service service
// get-committee-settings endpoint payload.
func NewGetCommitteeSettingsPayload(uid string, version *string, bearerToken *string) *committeeservice.GetCommitteeSettingsPayload {
	v := &committeeservice.GetCommitteeSettingsPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewUpdateCommitteeSettingsPayload builds a committee-service service
// update-committee-settings endpoint payload.
func NewUpdateCommitteeSettingsPayload(body *UpdateCommitteeSettingsRequestBody, uid string, version *string, bearerToken *string, ifMatch *string) *committeeservice.UpdateCommitteeSettingsPayload {
	v := &committeeservice.UpdateCommitteeSettingsPayload{
		BusinessEmailRequired: *body.BusinessEmailRequired,
		LastReviewedAt:        body.LastReviewedAt,
		LastReviewedBy:        body.LastReviewedBy,
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v
}

// NewCreateCommitteeMemberPayload builds a committee-service service
// create-committee-member endpoint payload.
func NewCreateCommitteeMemberPayload(body *CreateCommitteeMemberRequestBody, uid string, version string, bearerToken *string) *committeeservice.CreateCommitteeMemberPayload {
	v := &committeeservice.CreateCommitteeMemberPayload{
		Username:  body.Username,
		Email:     *body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		JobTitle:  body.JobTitle,
		Agency:    body.Agency,
		Country:   body.Country,
	}
	if body.AppointedBy != nil {
		v.AppointedBy = *body.AppointedBy
	}
	if body.Status != nil {
		v.Status = *body.Status
	}
	if body.Role != nil {
		v.Role = &struct {
			// Committee role name
			Name string
			// Role start date
			StartDate *string
			// Role end date
			EndDate *string
		}{
			StartDate: body.Role.StartDate,
			EndDate:   body.Role.EndDate,
		}
		if body.Role.Name != nil {
			v.Role.Name = *body.Role.Name
		}
		if body.Role.Name == nil {
			v.Role.Name = "None"
		}
	}
	if body.AppointedBy == nil {
		v.AppointedBy = "None"
	}
	if body.Status == nil {
		v.Status = "Active"
	}
	if body.Voting != nil {
		v.Voting = &struct {
			// Voting status
			Status string
			// Voting start date
			StartDate *string
			// Voting end date
			EndDate *string
		}{
			StartDate: body.Voting.StartDate,
			EndDate:   body.Voting.EndDate,
		}
		if body.Voting.Status != nil {
			v.Voting.Status = *body.Voting.Status
		}
		if body.Voting.Status == nil {
			v.Voting.Status = "None"
		}
	}
	if body.Organization != nil {
		v.Organization = &struct {
			// Organization name
			Name *string
			// Organization website URL
			Website *string
		}{
			Name:    body.Organization.Name,
			Website: body.Organization.Website,
		}
	}
	v.UID = uid
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewGetCommitteeMemberPayload builds a committee-service service
// get-committee-member endpoint payload.
func NewGetCommitteeMemberPayload(uid string, memberUID string, version string, bearerToken *string) *committeeservice.GetCommitteeMemberPayload {
	v := &committeeservice.GetCommitteeMemberPayload{}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewUpdateCommitteeMemberPayload builds a committee-service service
// update-committee-member endpoint payload.
func NewUpdateCommitteeMemberPayload(body *UpdateCommitteeMemberRequestBody, uid string, memberUID string, version string, bearerToken *string, ifMatch *string) *committeeservice.UpdateCommitteeMemberPayload {
	v := &committeeservice.UpdateCommitteeMemberPayload{
		Username:  body.Username,
		Email:     *body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		JobTitle:  body.JobTitle,
		Agency:    body.Agency,
		Country:   body.Country,
	}
	if body.AppointedBy != nil {
		v.AppointedBy = *body.AppointedBy
	}
	if body.Status != nil {
		v.Status = *body.Status
	}
	if body.Role != nil {
		v.Role = &struct {
			// Committee role name
			Name string
			// Role start date
			StartDate *string
			// Role end date
			EndDate *string
		}{
			StartDate: body.Role.StartDate,
			EndDate:   body.Role.EndDate,
		}
		if body.Role.Name != nil {
			v.Role.Name = *body.Role.Name
		}
		if body.Role.Name == nil {
			v.Role.Name = "None"
		}
	}
	if body.AppointedBy == nil {
		v.AppointedBy = "None"
	}
	if body.Status == nil {
		v.Status = "Active"
	}
	if body.Voting != nil {
		v.Voting = &struct {
			// Voting status
			Status string
			// Voting start date
			StartDate *string
			// Voting end date
			EndDate *string
		}{
			StartDate: body.Voting.StartDate,
			EndDate:   body.Voting.EndDate,
		}
		if body.Voting.Status != nil {
			v.Voting.Status = *body.Voting.Status
		}
		if body.Voting.Status == nil {
			v.Voting.Status = "None"
		}
	}
	if body.Organization != nil {
		v.Organization = &struct {
			// Organization name
			Name *string
			// Organization website URL
			Website *string
		}{
			Name:    body.Organization.Name,
			Website: body.Organization.Website,
		}
	}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v
}

// NewDeleteCommitteeMemberPayload builds a committee-service service
// delete-committee-member endpoint payload.
func NewDeleteCommitteeMemberPayload(uid string, memberUID string, version string, bearerToken *string, ifMatch *string) *committeeservice.DeleteCommitteeMemberPayload {
	v := &committeeservice.DeleteCommitteeMemberPayload{}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v
}

// ValidateCreateCommitteeRequestBody runs the validations defined on
// Create-CommitteeRequestBody
func ValidateCreateCommitteeRequestBody(body *CreateCommitteeRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.DisplayName != nil {
		if utf8.RuneCountInString(*body.DisplayName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
		}
	}
	if body.ParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateCommitteeBaseRequestBody runs the validations defined on
// Update-Committee-BaseRequestBody
func ValidateUpdateCommitteeBaseRequestBody(body *UpdateCommitteeBaseRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.DisplayName != nil {
		if utf8.RuneCountInString(*body.DisplayName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
		}
	}
	if body.ParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateCommitteeSettingsRequestBody runs the validations defined on
// Update-Committee-SettingsRequestBody
func ValidateUpdateCommitteeSettingsRequestBody(body *UpdateCommitteeSettingsRequestBody) (err error) {
	if body.BusinessEmailRequired == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("business_email_required", "body"))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	return
}

// ValidateCreateCommitteeMemberRequestBody runs the validations defined on
// Create-Committee-MemberRequestBody
func ValidateCreateCommitteeMemberRequestBody(body *CreateCommitteeMemberRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
		}
	}
	if body.Role != nil {
		if body.Role.Name != nil {
			if !(*body.Role.Name == "Chair" || *body.Role.Name == "Counsel" || *body.Role.Name == "Developer Seat" || *body.Role.Name == "TAC/TOC Representative" || *body.Role.Name == "Director" || *body.Role.Name == "Lead" || *body.Role.Name == "None" || *body.Role.Name == "Secretary" || *body.Role.Name == "Treasurer" || *body.Role.Name == "Vice Chair" || *body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", *body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
		}
		if body.Role.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
		}
		if body.Role.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
		}
	}
	if body.AppointedBy != nil {
		if !(*body.AppointedBy == "Community" || *body.AppointedBy == "Membership Entitlement" || *body.AppointedBy == "Vote of End User Member Class" || *body.AppointedBy == "Vote of TSC Committee" || *body.AppointedBy == "Vote of TAC Committee" || *body.AppointedBy == "Vote of Academic Member Class" || *body.AppointedBy == "Vote of Lab Member Class" || *body.AppointedBy == "Vote of Marketing Committee" || *body.AppointedBy == "Vote of Governing Board" || *body.AppointedBy == "Vote of General Member Class" || *body.AppointedBy == "Vote of End User Committee" || *body.AppointedBy == "Vote of TOC Committee" || *body.AppointedBy == "Vote of Gold Member Class" || *body.AppointedBy == "Vote of Silver Member Class" || *body.AppointedBy == "Vote of Strategic Membership Class" || *body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", *body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Active" || *body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"Active", "Inactive"}))
		}
	}
	if body.Voting != nil {
		if body.Voting.Status != nil {
			if !(*body.Voting.Status == "Alternate Voting Rep" || *body.Voting.Status == "Observer" || *body.Voting.Status == "Voting Rep" || *body.Voting.Status == "Emeritus" || *body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", *body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
		}
		if body.Voting.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
		}
		if body.Voting.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
		}
	}
	if body.Agency != nil {
		if utf8.RuneCountInString(*body.Agency) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
		}
	}
	if body.Country != nil {
		if utf8.RuneCountInString(*body.Country) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
		}
	}
	if body.Organization != nil {
		if body.Organization.Name != nil {
			if utf8.RuneCountInString(*body.Organization.Name) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
			}
		}
		if body.Organization.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
		}
	}
	return
}

// ValidateUpdateCommitteeMemberRequestBody runs the validations defined on
// Update-Committee-MemberRequestBody
func ValidateUpdateCommitteeMemberRequestBody(body *UpdateCommitteeMemberRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
		}
	}
	if body.Role != nil {
		if body.Role.Name != nil {
			if !(*body.Role.Name == "Chair" || *body.Role.Name == "Counsel" || *body.Role.Name == "Developer Seat" || *body.Role.Name == "TAC/TOC Representative" || *body.Role.Name == "Director" || *body.Role.Name == "Lead" || *body.Role.Name == "None" || *body.Role.Name == "Secretary" || *body.Role.Name == "Treasurer" || *body.Role.Name == "Vice Chair" || *body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", *body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
		}
		if body.Role.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
		}
		if body.Role.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
		}
	}
	if body.AppointedBy != nil {
		if !(*body.AppointedBy == "Community" || *body.AppointedBy == "Membership Entitlement" || *body.AppointedBy == "Vote of End User Member Class" || *body.AppointedBy == "Vote of TSC Committee" || *body.AppointedBy == "Vote of TAC Committee" || *body.AppointedBy == "Vote of Academic Member Class" || *body.AppointedBy == "Vote of Lab Member Class" || *body.AppointedBy == "Vote of Marketing Committee" || *body.AppointedBy == "Vote of Governing Board" || *body.AppointedBy == "Vote of General Member Class" || *body.AppointedBy == "Vote of End User Committee" || *body.AppointedBy == "Vote of TOC Committee" || *body.AppointedBy == "Vote of Gold Member Class" || *body.AppointedBy == "Vote of Silver Member Class" || *body.AppointedBy == "Vote of Strategic Membership Class" || *body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", *body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Active" || *body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"Active", "Inactive"}))
		}
	}
	if body.Voting != nil {
		if body.Voting.Status != nil {
			if !(*body.Voting.Status == "Alternate Voting Rep" || *body.Voting.Status == "Observer" || *body.Voting.Status == "Voting Rep" || *body.Voting.Status == "Emeritus" || *body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", *body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
		}
		if body.Voting.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
		}
		if body.Voting.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
		}
	}
	if body.Agency != nil {
		if utf8.RuneCountInString(*body.Agency) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
		}
	}
	if body.Country != nil {
		if utf8.RuneCountInString(*body.Country) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
		}
	}
	if body.Organization != nil {
		if body.Organization.Name != nil {
			if utf8.RuneCountInString(*body.Organization.Name) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
			}
		}
		if body.Organization.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
		}
	}
	return
}
