// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-service HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	committeeservice "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee_service"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateCommitteePayload builds the payload for the committee-service
// create-committee endpoint from CLI flags.
func BuildCreateCommitteePayload(committeeServiceCreateCommitteeBody string, committeeServiceCreateCommitteeVersion string, committeeServiceCreateCommitteeBearerToken string) (*committeeservice.CreateCommitteePayload, error) {
	var err error
	var body CreateCommitteeRequestBody
	{
		err = json.Unmarshal([]byte(committeeServiceCreateCommitteeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"auditors\": [\n         \"auditor_user_id1\",\n         \"auditor_user_id2\"\n      ],\n      \"business_email_required\": false,\n      \"calendar\": {\n         \"public\": true\n      },\n      \"category\": \"Technical Steering Committee\",\n      \"description\": \"Main technical oversight committee for the project\",\n      \"display_name\": \"TSC Committee Calendar\",\n      \"enable_voting\": true,\n      \"last_reviewed_at\": \"2025-08-04T09:00:00Z\",\n      \"last_reviewed_by\": \"user_id_12345\",\n      \"name\": \"Technical Steering Committee\",\n      \"parent_uid\": \"90b147f2-7cdd-157a-a2f4-9d4a567123fc\",\n      \"project_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public\": true,\n      \"requires_review\": true,\n      \"sso_group_enabled\": true,\n      \"website\": \"https://committee.example.org\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", body.ProjectUID, goa.FormatUUID))
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if !(body.Category == "Ambassador" || body.Category == "Board" || body.Category == "Code of Conduct" || body.Category == "Committers" || body.Category == "Expert Group" || body.Category == "Finance Committee" || body.Category == "Government Advisory Council" || body.Category == "Legal Committee" || body.Category == "Maintainers" || body.Category == "Marketing Committee/Sub Committee" || body.Category == "Marketing Mailing List" || body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || body.Category == "Other" || body.Category == "Product Security" || body.Category == "Special Interest Group" || body.Category == "Technical Mailing List" || body.Category == "Technical Oversight Committee/Technical Advisory Committee" || body.Category == "Technical Steering Committee" || body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
			}
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
		}
		if body.DisplayName != nil {
			if utf8.RuneCountInString(*body.DisplayName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
			}
		}
		if body.ParentUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
		}
		if body.LastReviewedAt != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceCreateCommitteeVersion != "" {
			version = &committeeServiceCreateCommitteeVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceCreateCommitteeBearerToken != "" {
			bearerToken = &committeeServiceCreateCommitteeBearerToken
		}
	}
	v := &committeeservice.CreateCommitteePayload{
		ProjectUID:            body.ProjectUID,
		Name:                  body.Name,
		Category:              body.Category,
		Description:           body.Description,
		Website:               body.Website,
		EnableVoting:          body.EnableVoting,
		SsoGroupEnabled:       body.SsoGroupEnabled,
		RequiresReview:        body.RequiresReview,
		Public:                body.Public,
		DisplayName:           body.DisplayName,
		ParentUID:             body.ParentUID,
		BusinessEmailRequired: body.BusinessEmailRequired,
		LastReviewedAt:        body.LastReviewedAt,
		LastReviewedBy:        body.LastReviewedBy,
	}
	{
		var zero bool
		if v.EnableVoting == zero {
			v.EnableVoting = false
		}
	}
	{
		var zero bool
		if v.SsoGroupEnabled == zero {
			v.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if v.RequiresReview == zero {
			v.RequiresReview = false
		}
	}
	{
		var zero bool
		if v.Public == zero {
			v.Public = false
		}
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{
			Public: body.Calendar.Public,
		}
		{
			var zero bool
			if v.Calendar.Public == zero {
				v.Calendar.Public = false
			}
		}
	}
	{
		var zero bool
		if v.BusinessEmailRequired == zero {
			v.BusinessEmailRequired = false
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetCommitteeBasePayload builds the payload for the committee-service
// get-committee-base endpoint from CLI flags.
func BuildGetCommitteeBasePayload(committeeServiceGetCommitteeBaseUID string, committeeServiceGetCommitteeBaseVersion string, committeeServiceGetCommitteeBaseBearerToken string) (*committeeservice.GetCommitteeBasePayload, error) {
	var err error
	var uid string
	{
		uid = committeeServiceGetCommitteeBaseUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceGetCommitteeBaseVersion != "" {
			version = &committeeServiceGetCommitteeBaseVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceGetCommitteeBaseBearerToken != "" {
			bearerToken = &committeeServiceGetCommitteeBaseBearerToken
		}
	}
	v := &committeeservice.GetCommitteeBasePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateCommitteeBasePayload builds the payload for the committee-service
// update-committee-base endpoint from CLI flags.
func BuildUpdateCommitteeBasePayload(committeeServiceUpdateCommitteeBaseBody string, committeeServiceUpdateCommitteeBaseUID string, committeeServiceUpdateCommitteeBaseVersion string, committeeServiceUpdateCommitteeBaseBearerToken string, committeeServiceUpdateCommitteeBaseIfMatch string) (*committeeservice.UpdateCommitteeBasePayload, error) {
	var err error
	var body UpdateCommitteeBaseRequestBody
	{
		err = json.Unmarshal([]byte(committeeServiceUpdateCommitteeBaseBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"calendar\": {\n         \"public\": true\n      },\n      \"category\": \"Technical Steering Committee\",\n      \"description\": \"Main technical oversight committee for the project\",\n      \"display_name\": \"TSC Committee Calendar\",\n      \"enable_voting\": true,\n      \"name\": \"Technical Steering Committee\",\n      \"parent_uid\": \"90b147f2-7cdd-157a-a2f4-9d4a567123fc\",\n      \"project_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public\": true,\n      \"requires_review\": true,\n      \"sso_group_enabled\": true,\n      \"website\": \"https://committee.example.org\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", body.ProjectUID, goa.FormatUUID))
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if !(body.Category == "Ambassador" || body.Category == "Board" || body.Category == "Code of Conduct" || body.Category == "Committers" || body.Category == "Expert Group" || body.Category == "Finance Committee" || body.Category == "Government Advisory Council" || body.Category == "Legal Committee" || body.Category == "Maintainers" || body.Category == "Marketing Committee/Sub Committee" || body.Category == "Marketing Mailing List" || body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || body.Category == "Other" || body.Category == "Product Security" || body.Category == "Special Interest Group" || body.Category == "Technical Mailing List" || body.Category == "Technical Oversight Committee/Technical Advisory Committee" || body.Category == "Technical Steering Committee" || body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
			}
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
		}
		if body.Website != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
		}
		if body.DisplayName != nil {
			if utf8.RuneCountInString(*body.DisplayName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
			}
		}
		if body.ParentUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = committeeServiceUpdateCommitteeBaseUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceUpdateCommitteeBaseVersion != "" {
			version = &committeeServiceUpdateCommitteeBaseVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceUpdateCommitteeBaseBearerToken != "" {
			bearerToken = &committeeServiceUpdateCommitteeBaseBearerToken
		}
	}
	var ifMatch *string
	{
		if committeeServiceUpdateCommitteeBaseIfMatch != "" {
			ifMatch = &committeeServiceUpdateCommitteeBaseIfMatch
		}
	}
	v := &committeeservice.UpdateCommitteeBasePayload{
		ProjectUID:      body.ProjectUID,
		Name:            body.Name,
		Category:        body.Category,
		Description:     body.Description,
		Website:         body.Website,
		EnableVoting:    body.EnableVoting,
		SsoGroupEnabled: body.SsoGroupEnabled,
		RequiresReview:  body.RequiresReview,
		Public:          body.Public,
		DisplayName:     body.DisplayName,
		ParentUID:       body.ParentUID,
	}
	{
		var zero bool
		if v.EnableVoting == zero {
			v.EnableVoting = false
		}
	}
	{
		var zero bool
		if v.SsoGroupEnabled == zero {
			v.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if v.RequiresReview == zero {
			v.RequiresReview = false
		}
	}
	{
		var zero bool
		if v.Public == zero {
			v.Public = false
		}
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{
			Public: body.Calendar.Public,
		}
		{
			var zero bool
			if v.Calendar.Public == zero {
				v.Calendar.Public = false
			}
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildDeleteCommitteePayload builds the payload for the committee-service
// delete-committee endpoint from CLI flags.
func BuildDeleteCommitteePayload(committeeServiceDeleteCommitteeUID string, committeeServiceDeleteCommitteeVersion string, committeeServiceDeleteCommitteeBearerToken string, committeeServiceDeleteCommitteeIfMatch string) (*committeeservice.DeleteCommitteePayload, error) {
	var err error
	var uid string
	{
		uid = committeeServiceDeleteCommitteeUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceDeleteCommitteeVersion != "" {
			version = &committeeServiceDeleteCommitteeVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceDeleteCommitteeBearerToken != "" {
			bearerToken = &committeeServiceDeleteCommitteeBearerToken
		}
	}
	var ifMatch *string
	{
		if committeeServiceDeleteCommitteeIfMatch != "" {
			ifMatch = &committeeServiceDeleteCommitteeIfMatch
		}
	}
	v := &committeeservice.DeleteCommitteePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildGetCommitteeSettingsPayload builds the payload for the
// committee-service get-committee-settings endpoint from CLI flags.
func BuildGetCommitteeSettingsPayload(committeeServiceGetCommitteeSettingsUID string, committeeServiceGetCommitteeSettingsVersion string, committeeServiceGetCommitteeSettingsBearerToken string) (*committeeservice.GetCommitteeSettingsPayload, error) {
	var err error
	var uid string
	{
		uid = committeeServiceGetCommitteeSettingsUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceGetCommitteeSettingsVersion != "" {
			version = &committeeServiceGetCommitteeSettingsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceGetCommitteeSettingsBearerToken != "" {
			bearerToken = &committeeServiceGetCommitteeSettingsBearerToken
		}
	}
	v := &committeeservice.GetCommitteeSettingsPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateCommitteeSettingsPayload builds the payload for the
// committee-service update-committee-settings endpoint from CLI flags.
func BuildUpdateCommitteeSettingsPayload(committeeServiceUpdateCommitteeSettingsBody string, committeeServiceUpdateCommitteeSettingsUID string, committeeServiceUpdateCommitteeSettingsVersion string, committeeServiceUpdateCommitteeSettingsBearerToken string, committeeServiceUpdateCommitteeSettingsIfMatch string) (*committeeservice.UpdateCommitteeSettingsPayload, error) {
	var err error
	var body UpdateCommitteeSettingsRequestBody
	{
		err = json.Unmarshal([]byte(committeeServiceUpdateCommitteeSettingsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"auditors\": [\n         \"auditor_user_id1\",\n         \"auditor_user_id2\"\n      ],\n      \"business_email_required\": false,\n      \"last_reviewed_at\": \"2025-08-04T09:00:00Z\",\n      \"last_reviewed_by\": \"user_id_12345\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		if body.LastReviewedAt != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = committeeServiceUpdateCommitteeSettingsUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if committeeServiceUpdateCommitteeSettingsVersion != "" {
			version = &committeeServiceUpdateCommitteeSettingsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if committeeServiceUpdateCommitteeSettingsBearerToken != "" {
			bearerToken = &committeeServiceUpdateCommitteeSettingsBearerToken
		}
	}
	var ifMatch *string
	{
		if committeeServiceUpdateCommitteeSettingsIfMatch != "" {
			ifMatch = &committeeServiceUpdateCommitteeSettingsIfMatch
		}
	}
	v := &committeeservice.UpdateCommitteeSettingsPayload{
		BusinessEmailRequired: body.BusinessEmailRequired,
		LastReviewedAt:        body.LastReviewedAt,
		LastReviewedBy:        body.LastReviewedBy,
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildCreateCommitteeMemberPayload builds the payload for the
// committee-service create-committee-member endpoint from CLI flags.
func BuildCreateCommitteeMemberPayload(committeeServiceCreateCommitteeMemberBody string, committeeServiceCreateCommitteeMemberUID string, committeeServiceCreateCommitteeMemberVersion string, committeeServiceCreateCommitteeMemberBearerToken string) (*committeeservice.CreateCommitteeMemberPayload, error) {
	var err error
	var body CreateCommitteeMemberRequestBody
	{
		err = json.Unmarshal([]byte(committeeServiceCreateCommitteeMemberBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"agency\": \"GSA\",\n      \"appointed_by\": \"Community\",\n      \"country\": \"United States\",\n      \"email\": \"user@example.com\",\n      \"first_name\": \"John\",\n      \"job_title\": \"Chief Technology Officer\",\n      \"last_name\": \"Doe\",\n      \"organization\": {\n         \"name\": \"The Linux Foundation\",\n         \"website\": \"https://linuxfoundation.org\"\n      },\n      \"role\": {\n         \"end_date\": \"2024-12-31\",\n         \"name\": \"Chair\",\n         \"start_date\": \"2023-01-01\"\n      },\n      \"status\": \"Active\",\n      \"username\": \"user123\",\n      \"voting\": {\n         \"end_date\": \"2024-12-31\",\n         \"start_date\": \"2023-01-01\",\n         \"status\": \"Voting Rep\"\n      }\n   }'")
		}
		if body.Username != nil {
			if utf8.RuneCountInString(*body.Username) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
			}
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if body.FirstName != nil {
			if utf8.RuneCountInString(*body.FirstName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
			}
		}
		if body.LastName != nil {
			if utf8.RuneCountInString(*body.LastName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
			}
		}
		if body.JobTitle != nil {
			if utf8.RuneCountInString(*body.JobTitle) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
			}
		}
		if body.Role != nil {
			if !(body.Role.Name == "Chair" || body.Role.Name == "Counsel" || body.Role.Name == "Developer Seat" || body.Role.Name == "TAC/TOC Representative" || body.Role.Name == "Director" || body.Role.Name == "Lead" || body.Role.Name == "None" || body.Role.Name == "Secretary" || body.Role.Name == "Treasurer" || body.Role.Name == "Vice Chair" || body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
			if body.Role.StartDate != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
			}
			if body.Role.EndDate != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
			}
		}
		if !(body.AppointedBy == "Community" || body.AppointedBy == "Membership Entitlement" || body.AppointedBy == "Vote of End User Member Class" || body.AppointedBy == "Vote of TSC Committee" || body.AppointedBy == "Vote of TAC Committee" || body.AppointedBy == "Vote of Academic Member Class" || body.AppointedBy == "Vote of Lab Member Class" || body.AppointedBy == "Vote of Marketing Committee" || body.AppointedBy == "Vote of Governing Board" || body.AppointedBy == "Vote of General Member Class" || body.AppointedBy == "Vote of End User Committee" || body.AppointedBy == "Vote of TOC Committee" || body.AppointedBy == "Vote of Gold Member Class" || body.AppointedBy == "Vote of Silver Member Class" || body.AppointedBy == "Vote of Strategic Membership Class" || body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
		if !(body.Status == "Active" || body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []any{"Active", "Inactive"}))
		}
		if body.Voting != nil {
			if !(body.Voting.Status == "Alternate Voting Rep" || body.Voting.Status == "Observer" || body.Voting.Status == "Voting Rep" || body.Voting.Status == "Emeritus" || body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
			if body.Voting.StartDate != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
			}
			if body.Voting.EndDate != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
			}
		}
		if body.Agency != nil {
			if utf8.RuneCountInString(*body.Agency) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
			}
		}
		if body.Country != nil {
			if utf8.RuneCountInString(*body.Country) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
			}
		}
		if body.Organization != nil {
			if body.Organization.Name != nil {
				if utf8.RuneCountInString(*body.Organization.Name) > 200 {
					err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
				}
			}
			if body.Organization.Website != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = committeeServiceCreateCommitteeMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = committeeServiceCreateCommitteeMemberVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken *string
	{
		if committeeServiceCreateCommitteeMemberBearerToken != "" {
			bearerToken = &committeeServiceCreateCommitteeMemberBearerToken
		}
	}
	v := &committeeservice.CreateCommitteeMemberPayload{
		Username:    body.Username,
		Email:       body.Email,
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		JobTitle:    body.JobTitle,
		AppointedBy: body.AppointedBy,
		Status:      body.Status,
		Agency:      body.Agency,
		Country:     body.Country,
	}
	if body.Role != nil {
		v.Role = &struct {
			// Committee role name
			Name string
			// Role start date
			StartDate *string
			// Role end date
			EndDate *string
		}{
			Name:      body.Role.Name,
			StartDate: body.Role.StartDate,
			EndDate:   body.Role.EndDate,
		}
		{
			var zero string
			if v.Role.Name == zero {
				v.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if v.AppointedBy == zero {
			v.AppointedBy = "None"
		}
	}
	{
		var zero string
		if v.Status == zero {
			v.Status = "Active"
		}
	}
	if body.Voting != nil {
		v.Voting = &struct {
			// Voting status
			Status string
			// Voting start date
			StartDate *string
			// Voting end date
			EndDate *string
		}{
			Status:    body.Voting.Status,
			StartDate: body.Voting.StartDate,
			EndDate:   body.Voting.EndDate,
		}
		{
			var zero string
			if v.Voting.Status == zero {
				v.Voting.Status = "None"
			}
		}
	}
	if body.Organization != nil {
		v.Organization = &struct {
			// Organization name
			Name *string
			// Organization website URL
			Website *string
		}{
			Name:    body.Organization.Name,
			Website: body.Organization.Website,
		}
	}
	v.UID = uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetCommitteeMemberPayload builds the payload for the committee-service
// get-committee-member endpoint from CLI flags.
func BuildGetCommitteeMemberPayload(committeeServiceGetCommitteeMemberUID string, committeeServiceGetCommitteeMemberMemberUID string, committeeServiceGetCommitteeMemberVersion string, committeeServiceGetCommitteeMemberBearerToken string) (*committeeservice.GetCommitteeMemberPayload, error) {
	var err error
	var uid string
	{
		uid = committeeServiceGetCommitteeMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var memberUID string
	{
		memberUID = committeeServiceGetCommitteeMemberMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("member_uid", memberUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = committeeServiceGetCommitteeMemberVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken *string
	{
		if committeeServiceGetCommitteeMemberBearerToken != "" {
			bearerToken = &committeeServiceGetCommitteeMemberBearerToken
		}
	}
	v := &committeeservice.GetCommitteeMemberPayload{}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateCommitteeMemberPayload builds the payload for the
// committee-service update-committee-member endpoint from CLI flags.
func BuildUpdateCommitteeMemberPayload(committeeServiceUpdateCommitteeMemberBody string, committeeServiceUpdateCommitteeMemberUID string, committeeServiceUpdateCommitteeMemberMemberUID string, committeeServiceUpdateCommitteeMemberVersion string, committeeServiceUpdateCommitteeMemberBearerToken string, committeeServiceUpdateCommitteeMemberIfMatch string) (*committeeservice.UpdateCommitteeMemberPayload, error) {
	var err error
	var body UpdateCommitteeMemberRequestBody
	{
		err = json.Unmarshal([]byte(committeeServiceUpdateCommitteeMemberBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"agency\": \"GSA\",\n      \"appointed_by\": \"Community\",\n      \"country\": \"United States\",\n      \"email\": \"user@example.com\",\n      \"first_name\": \"John\",\n      \"job_title\": \"Chief Technology Officer\",\n      \"last_name\": \"Doe\",\n      \"organization\": {\n         \"name\": \"The Linux Foundation\",\n         \"website\": \"https://linuxfoundation.org\"\n      },\n      \"role\": {\n         \"end_date\": \"2024-12-31\",\n         \"name\": \"Chair\",\n         \"start_date\": \"2023-01-01\"\n      },\n      \"status\": \"Active\",\n      \"username\": \"user123\",\n      \"voting\": {\n         \"end_date\": \"2024-12-31\",\n         \"start_date\": \"2023-01-01\",\n         \"status\": \"Voting Rep\"\n      }\n   }'")
		}
		if body.Username != nil {
			if utf8.RuneCountInString(*body.Username) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
			}
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if body.FirstName != nil {
			if utf8.RuneCountInString(*body.FirstName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
			}
		}
		if body.LastName != nil {
			if utf8.RuneCountInString(*body.LastName) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
			}
		}
		if body.JobTitle != nil {
			if utf8.RuneCountInString(*body.JobTitle) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
			}
		}
		if body.Role != nil {
			if !(body.Role.Name == "Chair" || body.Role.Name == "Counsel" || body.Role.Name == "Developer Seat" || body.Role.Name == "TAC/TOC Representative" || body.Role.Name == "Director" || body.Role.Name == "Lead" || body.Role.Name == "None" || body.Role.Name == "Secretary" || body.Role.Name == "Treasurer" || body.Role.Name == "Vice Chair" || body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
			if body.Role.StartDate != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
			}
			if body.Role.EndDate != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
			}
		}
		if !(body.AppointedBy == "Community" || body.AppointedBy == "Membership Entitlement" || body.AppointedBy == "Vote of End User Member Class" || body.AppointedBy == "Vote of TSC Committee" || body.AppointedBy == "Vote of TAC Committee" || body.AppointedBy == "Vote of Academic Member Class" || body.AppointedBy == "Vote of Lab Member Class" || body.AppointedBy == "Vote of Marketing Committee" || body.AppointedBy == "Vote of Governing Board" || body.AppointedBy == "Vote of General Member Class" || body.AppointedBy == "Vote of End User Committee" || body.AppointedBy == "Vote of TOC Committee" || body.AppointedBy == "Vote of Gold Member Class" || body.AppointedBy == "Vote of Silver Member Class" || body.AppointedBy == "Vote of Strategic Membership Class" || body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
		if !(body.Status == "Active" || body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", body.Status, []any{"Active", "Inactive"}))
		}
		if body.Voting != nil {
			if !(body.Voting.Status == "Alternate Voting Rep" || body.Voting.Status == "Observer" || body.Voting.Status == "Voting Rep" || body.Voting.Status == "Emeritus" || body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
			if body.Voting.StartDate != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
			}
			if body.Voting.EndDate != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
			}
		}
		if body.Agency != nil {
			if utf8.RuneCountInString(*body.Agency) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
			}
		}
		if body.Country != nil {
			if utf8.RuneCountInString(*body.Country) > 100 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
			}
		}
		if body.Organization != nil {
			if body.Organization.Name != nil {
				if utf8.RuneCountInString(*body.Organization.Name) > 200 {
					err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
				}
			}
			if body.Organization.Website != nil {
				err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = committeeServiceUpdateCommitteeMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var memberUID string
	{
		memberUID = committeeServiceUpdateCommitteeMemberMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("member_uid", memberUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = committeeServiceUpdateCommitteeMemberVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken *string
	{
		if committeeServiceUpdateCommitteeMemberBearerToken != "" {
			bearerToken = &committeeServiceUpdateCommitteeMemberBearerToken
		}
	}
	var ifMatch string
	{
		ifMatch = committeeServiceUpdateCommitteeMemberIfMatch
	}
	v := &committeeservice.UpdateCommitteeMemberPayload{
		Username:    body.Username,
		Email:       body.Email,
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		JobTitle:    body.JobTitle,
		AppointedBy: body.AppointedBy,
		Status:      body.Status,
		Agency:      body.Agency,
		Country:     body.Country,
	}
	if body.Role != nil {
		v.Role = &struct {
			// Committee role name
			Name string
			// Role start date
			StartDate *string
			// Role end date
			EndDate *string
		}{
			Name:      body.Role.Name,
			StartDate: body.Role.StartDate,
			EndDate:   body.Role.EndDate,
		}
		{
			var zero string
			if v.Role.Name == zero {
				v.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if v.AppointedBy == zero {
			v.AppointedBy = "None"
		}
	}
	{
		var zero string
		if v.Status == zero {
			v.Status = "Active"
		}
	}
	if body.Voting != nil {
		v.Voting = &struct {
			// Voting status
			Status string
			// Voting start date
			StartDate *string
			// Voting end date
			EndDate *string
		}{
			Status:    body.Voting.Status,
			StartDate: body.Voting.StartDate,
			EndDate:   body.Voting.EndDate,
		}
		{
			var zero string
			if v.Voting.Status == zero {
				v.Voting.Status = "None"
			}
		}
	}
	if body.Organization != nil {
		v.Organization = &struct {
			// Organization name
			Name *string
			// Organization website URL
			Website *string
		}{
			Name:    body.Organization.Name,
			Website: body.Organization.Website,
		}
	}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildDeleteCommitteeMemberPayload builds the payload for the
// committee-service delete-committee-member endpoint from CLI flags.
func BuildDeleteCommitteeMemberPayload(committeeServiceDeleteCommitteeMemberUID string, committeeServiceDeleteCommitteeMemberMemberUID string, committeeServiceDeleteCommitteeMemberVersion string, committeeServiceDeleteCommitteeMemberBearerToken string, committeeServiceDeleteCommitteeMemberIfMatch string) (*committeeservice.DeleteCommitteeMemberPayload, error) {
	var err error
	var uid string
	{
		uid = committeeServiceDeleteCommitteeMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var memberUID string
	{
		memberUID = committeeServiceDeleteCommitteeMemberMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("member_uid", memberUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = committeeServiceDeleteCommitteeMemberVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken *string
	{
		if committeeServiceDeleteCommitteeMemberBearerToken != "" {
			bearerToken = &committeeServiceDeleteCommitteeMemberBearerToken
		}
	}
	var ifMatch string
	{
		ifMatch = committeeServiceDeleteCommitteeMemberIfMatch
	}
	v := &committeeservice.DeleteCommitteeMemberPayload{}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}
