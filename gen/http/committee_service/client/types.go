// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-service HTTP client types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package client

import (
	"unicode/utf8"

	committeeservice "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateCommitteeRequestBody is the type of the "committee-service" service
// "create-committee" endpoint HTTP request body.
type CreateCommitteeRequestBody struct {
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// The name of the committee
	Name string `form:"name" json:"name" xml:"name"`
	// The category of the committee
	Category string `form:"category" json:"category" xml:"category"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether this committee is expected to be reviewed
	RequiresReview bool `form:"requires_review" json:"requires_review" xml:"requires_review"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired bool `form:"business_email_required" json:"business_email_required" xml:"business_email_required"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this committee
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// UpdateCommitteeBaseRequestBody is the type of the "committee-service"
// service "update-committee-base" endpoint HTTP request body.
type UpdateCommitteeBaseRequestBody struct {
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// The name of the committee
	Name string `form:"name" json:"name" xml:"name"`
	// The category of the committee
	Category string `form:"category" json:"category" xml:"category"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting bool `form:"enable_voting" json:"enable_voting" xml:"enable_voting"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled bool `form:"sso_group_enabled" json:"sso_group_enabled" xml:"sso_group_enabled"`
	// Whether this committee is expected to be reviewed
	RequiresReview bool `form:"requires_review" json:"requires_review" xml:"requires_review"`
	// General committee visibility/access permissions
	Public bool `form:"public" json:"public" xml:"public"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
}

// UpdateCommitteeSettingsRequestBody is the type of the "committee-service"
// service "update-committee-settings" endpoint HTTP request body.
type UpdateCommitteeSettingsRequestBody struct {
	// Whether business email is required for committee members
	BusinessEmailRequired bool `form:"business_email_required" json:"business_email_required" xml:"business_email_required"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this committee
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateCommitteeMemberRequestBody is the type of the "committee-service"
// service "create-committee-member" endpoint HTTP request body.
type CreateCommitteeMemberRequestBody struct {
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email string `form:"email" json:"email" xml:"email"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy string `form:"appointed_by" json:"appointed_by" xml:"appointed_by"`
	// Member status
	Status string `form:"status" json:"status" xml:"status"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
}

// UpdateCommitteeMemberRequestBody is the type of the "committee-service"
// service "update-committee-member" endpoint HTTP request body.
type UpdateCommitteeMemberRequestBody struct {
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email string `form:"email" json:"email" xml:"email"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy string `form:"appointed_by" json:"appointed_by" xml:"appointed_by"`
	// Member status
	Status string `form:"status" json:"status" xml:"status"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
}

// CreateCommitteeResponseBody is the type of the "committee-service" service
// "create-committee" endpoint HTTP response body.
type CreateCommitteeResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether this committee is expected to be reviewed
	RequiresReview *bool `form:"requires_review,omitempty" json:"requires_review,omitempty" xml:"requires_review,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The name of the SSO group - read-only
	SsoGroupName *string `form:"sso_group_name,omitempty" json:"sso_group_name,omitempty" xml:"sso_group_name,omitempty"`
	// The total number of members in this committee
	TotalMembers *int `form:"total_members,omitempty" json:"total_members,omitempty" xml:"total_members,omitempty"`
	// The total number of repositories with voting permissions for this committee
	TotalVotingRepos *int `form:"total_voting_repos,omitempty" json:"total_voting_repos,omitempty" xml:"total_voting_repos,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this committee
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this committee
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetCommitteeBaseResponseBody is the type of the "committee-service" service
// "get-committee-base" endpoint HTTP response body.
type GetCommitteeBaseResponseBody CommitteeBaseWithReadonlyAttributesResponseBody

// UpdateCommitteeBaseResponseBody is the type of the "committee-service"
// service "update-committee-base" endpoint HTTP response body.
type UpdateCommitteeBaseResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether this committee is expected to be reviewed
	RequiresReview *bool `form:"requires_review,omitempty" json:"requires_review,omitempty" xml:"requires_review,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The name of the project this committee belongs to
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The name of the SSO group - read-only
	SsoGroupName *string `form:"sso_group_name,omitempty" json:"sso_group_name,omitempty" xml:"sso_group_name,omitempty"`
	// The total number of members in this committee
	TotalMembers *int `form:"total_members,omitempty" json:"total_members,omitempty" xml:"total_members,omitempty"`
	// The total number of repositories with voting permissions for this committee
	TotalVotingRepos *int `form:"total_voting_repos,omitempty" json:"total_voting_repos,omitempty" xml:"total_voting_repos,omitempty"`
}

// GetCommitteeSettingsResponseBody is the type of the "committee-service"
// service "get-committee-settings" endpoint HTTP response body.
type GetCommitteeSettingsResponseBody CommitteeSettingsWithReadonlyAttributesResponseBody

// UpdateCommitteeSettingsResponseBody is the type of the "committee-service"
// service "update-committee-settings" endpoint HTTP response body.
type UpdateCommitteeSettingsResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateCommitteeMemberResponseBody is the type of the "committee-service"
// service "create-committee-member" endpoint HTTP response body.
type CreateCommitteeMemberResponseBody struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Committee UID -- v2 uid, not related to v1 id directly
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// The name of the committee this member belongs to
	CommitteeName *string `form:"committee_name,omitempty" json:"committee_name,omitempty" xml:"committee_name,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name *string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy *string `form:"appointed_by,omitempty" json:"appointed_by,omitempty" xml:"appointed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status *string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetCommitteeMemberResponseBody is the type of the "committee-service"
// service "get-committee-member" endpoint HTTP response body.
type GetCommitteeMemberResponseBody CommitteeMemberFullWithReadonlyAttributesResponseBody

// UpdateCommitteeMemberResponseBody is the type of the "committee-service"
// service "update-committee-member" endpoint HTTP response body.
type UpdateCommitteeMemberResponseBody struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Committee UID -- v2 uid, not related to v1 id directly
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// The name of the committee this member belongs to
	CommitteeName *string `form:"committee_name,omitempty" json:"committee_name,omitempty" xml:"committee_name,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name *string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy *string `form:"appointed_by,omitempty" json:"appointed_by,omitempty" xml:"appointed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status *string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateCommitteeBadRequestResponseBody is the type of the "committee-service"
// service "create-committee" endpoint HTTP response body for the "BadRequest"
// error.
type CreateCommitteeBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeConflictResponseBody is the type of the "committee-service"
// service "create-committee" endpoint HTTP response body for the "Conflict"
// error.
type CreateCommitteeConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeInternalServerErrorResponseBody is the type of the
// "committee-service" service "create-committee" endpoint HTTP response body
// for the "InternalServerError" error.
type CreateCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeNotFoundResponseBody is the type of the "committee-service"
// service "create-committee" endpoint HTTP response body for the "NotFound"
// error.
type CreateCommitteeNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeServiceUnavailableResponseBody is the type of the
// "committee-service" service "create-committee" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type CreateCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeBaseInternalServerErrorResponseBody is the type of the
// "committee-service" service "get-committee-base" endpoint HTTP response body
// for the "InternalServerError" error.
type GetCommitteeBaseInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeBaseNotFoundResponseBody is the type of the "committee-service"
// service "get-committee-base" endpoint HTTP response body for the "NotFound"
// error.
type GetCommitteeBaseNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeBaseServiceUnavailableResponseBody is the type of the
// "committee-service" service "get-committee-base" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type GetCommitteeBaseServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeBaseBadRequestResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "BadRequest" error.
type UpdateCommitteeBaseBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeBaseConflictResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "Conflict" error.
type UpdateCommitteeBaseConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeBaseInternalServerErrorResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateCommitteeBaseInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeBaseNotFoundResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "NotFound" error.
type UpdateCommitteeBaseNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeBaseServiceUnavailableResponseBody is the type of the
// "committee-service" service "update-committee-base" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateCommitteeBaseServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeBadRequestResponseBody is the type of the "committee-service"
// service "delete-committee" endpoint HTTP response body for the "BadRequest"
// error.
type DeleteCommitteeBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeConflictResponseBody is the type of the "committee-service"
// service "delete-committee" endpoint HTTP response body for the "Conflict"
// error.
type DeleteCommitteeConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeInternalServerErrorResponseBody is the type of the
// "committee-service" service "delete-committee" endpoint HTTP response body
// for the "InternalServerError" error.
type DeleteCommitteeInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeNotFoundResponseBody is the type of the "committee-service"
// service "delete-committee" endpoint HTTP response body for the "NotFound"
// error.
type DeleteCommitteeNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeServiceUnavailableResponseBody is the type of the
// "committee-service" service "delete-committee" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type DeleteCommitteeServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeSettingsInternalServerErrorResponseBody is the type of the
// "committee-service" service "get-committee-settings" endpoint HTTP response
// body for the "InternalServerError" error.
type GetCommitteeSettingsInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeSettingsNotFoundResponseBody is the type of the
// "committee-service" service "get-committee-settings" endpoint HTTP response
// body for the "NotFound" error.
type GetCommitteeSettingsNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeSettingsServiceUnavailableResponseBody is the type of the
// "committee-service" service "get-committee-settings" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetCommitteeSettingsServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeSettingsBadRequestResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "BadRequest" error.
type UpdateCommitteeSettingsBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeSettingsConflictResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "Conflict" error.
type UpdateCommitteeSettingsConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeSettingsInternalServerErrorResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "InternalServerError" error.
type UpdateCommitteeSettingsInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeSettingsNotFoundResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "NotFound" error.
type UpdateCommitteeSettingsNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeSettingsServiceUnavailableResponseBody is the type of the
// "committee-service" service "update-committee-settings" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type UpdateCommitteeSettingsServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "committee-service"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeMemberBadRequestResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "BadRequest" error.
type CreateCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeMemberConflictResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "Conflict" error.
type CreateCommitteeMemberConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "InternalServerError" error.
type CreateCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeMemberNotFoundResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "NotFound" error.
type CreateCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-service" service "create-committee-member" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type CreateCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeMemberBadRequestResponseBody is the type of the
// "committee-service" service "get-committee-member" endpoint HTTP response
// body for the "BadRequest" error.
type GetCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-service" service "get-committee-member" endpoint HTTP response
// body for the "InternalServerError" error.
type GetCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeMemberNotFoundResponseBody is the type of the
// "committee-service" service "get-committee-member" endpoint HTTP response
// body for the "NotFound" error.
type GetCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-service" service "get-committee-member" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeMemberBadRequestResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "BadRequest" error.
type UpdateCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeMemberConflictResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "Conflict" error.
type UpdateCommitteeMemberConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeMemberNotFoundResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "NotFound" error.
type UpdateCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-service" service "update-committee-member" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeMemberBadRequestResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "BadRequest" error.
type DeleteCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeMemberConflictResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "Conflict" error.
type DeleteCommitteeMemberConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "InternalServerError" error.
type DeleteCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeMemberNotFoundResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "NotFound" error.
type DeleteCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-service" service "delete-committee-member" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type DeleteCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CommitteeBaseWithReadonlyAttributesResponseBody is used to define fields on
// response body types.
type CommitteeBaseWithReadonlyAttributesResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Project UID this committee belongs to -- v2 uid, not related to v1 id
	// directly
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The name of the committee
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The category of the committee
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	// The description of the committee
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The website URL of the committee
	Website *string `form:"website,omitempty" json:"website,omitempty" xml:"website,omitempty"`
	// Whether voting is enabled for this committee
	EnableVoting *bool `form:"enable_voting,omitempty" json:"enable_voting,omitempty" xml:"enable_voting,omitempty"`
	// Whether SSO group integration is enabled
	SsoGroupEnabled *bool `form:"sso_group_enabled,omitempty" json:"sso_group_enabled,omitempty" xml:"sso_group_enabled,omitempty"`
	// Whether this committee is expected to be reviewed
	RequiresReview *bool `form:"requires_review,omitempty" json:"requires_review,omitempty" xml:"requires_review,omitempty"`
	// General committee visibility/access permissions
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Settings related to the committee calendar
	Calendar *struct {
		// Whether the committee calendar is publicly visible
		Public *bool `form:"public" json:"public" xml:"public"`
	} `form:"calendar,omitempty" json:"calendar,omitempty" xml:"calendar,omitempty"`
	// The display name of the committee
	DisplayName *string `form:"display_name,omitempty" json:"display_name,omitempty" xml:"display_name,omitempty"`
	// The UID of the parent committee -- v2 uid, not related to v1 id directly,
	// should be empty if there is none
	ParentUID *string `form:"parent_uid,omitempty" json:"parent_uid,omitempty" xml:"parent_uid,omitempty"`
	// The name of the project this committee belongs to
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The name of the SSO group - read-only
	SsoGroupName *string `form:"sso_group_name,omitempty" json:"sso_group_name,omitempty" xml:"sso_group_name,omitempty"`
	// The total number of members in this committee
	TotalMembers *int `form:"total_members,omitempty" json:"total_members,omitempty" xml:"total_members,omitempty"`
	// The total number of repositories with voting permissions for this committee
	TotalVotingRepos *int `form:"total_voting_repos,omitempty" json:"total_voting_repos,omitempty" xml:"total_voting_repos,omitempty"`
}

// CommitteeSettingsWithReadonlyAttributesResponseBody is used to define fields
// on response body types.
type CommitteeSettingsWithReadonlyAttributesResponseBody struct {
	// Committee UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Whether business email is required for committee members
	BusinessEmailRequired *bool `form:"business_email_required,omitempty" json:"business_email_required,omitempty" xml:"business_email_required,omitempty"`
	// The timestamp when the committee was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this committee
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CommitteeMemberFullWithReadonlyAttributesResponseBody is used to define
// fields on response body types.
type CommitteeMemberFullWithReadonlyAttributesResponseBody struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Committee UID -- v2 uid, not related to v1 id directly
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// The name of the committee this member belongs to
	CommitteeName *string `form:"committee_name,omitempty" json:"committee_name,omitempty" xml:"committee_name,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name *string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy *string `form:"appointed_by,omitempty" json:"appointed_by,omitempty" xml:"appointed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status *string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateCommitteeRequestBody builds the HTTP request body from the payload
// of the "create-committee" endpoint of the "committee-service" service.
func NewCreateCommitteeRequestBody(p *committeeservice.CreateCommitteePayload) *CreateCommitteeRequestBody {
	body := &CreateCommitteeRequestBody{
		ProjectUID:            p.ProjectUID,
		Name:                  p.Name,
		Category:              p.Category,
		Description:           p.Description,
		Website:               p.Website,
		EnableVoting:          p.EnableVoting,
		SsoGroupEnabled:       p.SsoGroupEnabled,
		RequiresReview:        p.RequiresReview,
		Public:                p.Public,
		DisplayName:           p.DisplayName,
		ParentUID:             p.ParentUID,
		BusinessEmailRequired: p.BusinessEmailRequired,
		LastReviewedAt:        p.LastReviewedAt,
		LastReviewedBy:        p.LastReviewedBy,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.RequiresReview == zero {
			body.RequiresReview = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if p.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: p.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	{
		var zero bool
		if body.BusinessEmailRequired == zero {
			body.BusinessEmailRequired = false
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewUpdateCommitteeBaseRequestBody builds the HTTP request body from the
// payload of the "update-committee-base" endpoint of the "committee-service"
// service.
func NewUpdateCommitteeBaseRequestBody(p *committeeservice.UpdateCommitteeBasePayload) *UpdateCommitteeBaseRequestBody {
	body := &UpdateCommitteeBaseRequestBody{
		ProjectUID:      p.ProjectUID,
		Name:            p.Name,
		Category:        p.Category,
		Description:     p.Description,
		Website:         p.Website,
		EnableVoting:    p.EnableVoting,
		SsoGroupEnabled: p.SsoGroupEnabled,
		RequiresReview:  p.RequiresReview,
		Public:          p.Public,
		DisplayName:     p.DisplayName,
		ParentUID:       p.ParentUID,
	}
	{
		var zero bool
		if body.EnableVoting == zero {
			body.EnableVoting = false
		}
	}
	{
		var zero bool
		if body.SsoGroupEnabled == zero {
			body.SsoGroupEnabled = false
		}
	}
	{
		var zero bool
		if body.RequiresReview == zero {
			body.RequiresReview = false
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if p.Calendar != nil {
		body.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool `form:"public" json:"public" xml:"public"`
		}{
			Public: p.Calendar.Public,
		}
		{
			var zero bool
			if body.Calendar.Public == zero {
				body.Calendar.Public = false
			}
		}
	}
	return body
}

// NewUpdateCommitteeSettingsRequestBody builds the HTTP request body from the
// payload of the "update-committee-settings" endpoint of the
// "committee-service" service.
func NewUpdateCommitteeSettingsRequestBody(p *committeeservice.UpdateCommitteeSettingsPayload) *UpdateCommitteeSettingsRequestBody {
	body := &UpdateCommitteeSettingsRequestBody{
		BusinessEmailRequired: p.BusinessEmailRequired,
		LastReviewedAt:        p.LastReviewedAt,
		LastReviewedBy:        p.LastReviewedBy,
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewCreateCommitteeMemberRequestBody builds the HTTP request body from the
// payload of the "create-committee-member" endpoint of the "committee-service"
// service.
func NewCreateCommitteeMemberRequestBody(p *committeeservice.CreateCommitteeMemberPayload) *CreateCommitteeMemberRequestBody {
	body := &CreateCommitteeMemberRequestBody{
		Username:    p.Username,
		Email:       p.Email,
		FirstName:   p.FirstName,
		LastName:    p.LastName,
		JobTitle:    p.JobTitle,
		AppointedBy: p.AppointedBy,
		Status:      p.Status,
		Agency:      p.Agency,
		Country:     p.Country,
	}
	if p.Role != nil {
		body.Role = &struct {
			// Committee role name
			Name string `form:"name" json:"name" xml:"name"`
			// Role start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Role end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Name:      p.Role.Name,
			StartDate: p.Role.StartDate,
			EndDate:   p.Role.EndDate,
		}
		{
			var zero string
			if body.Role.Name == zero {
				body.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if body.AppointedBy == zero {
			body.AppointedBy = "None"
		}
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "Active"
		}
	}
	if p.Voting != nil {
		body.Voting = &struct {
			// Voting status
			Status string `form:"status" json:"status" xml:"status"`
			// Voting start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Voting end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Status:    p.Voting.Status,
			StartDate: p.Voting.StartDate,
			EndDate:   p.Voting.EndDate,
		}
		{
			var zero string
			if body.Voting.Status == zero {
				body.Voting.Status = "None"
			}
		}
	}
	if p.Organization != nil {
		body.Organization = &struct {
			// Organization name
			Name *string `form:"name" json:"name" xml:"name"`
			// Organization website URL
			Website *string `form:"website" json:"website" xml:"website"`
		}{
			Name:    p.Organization.Name,
			Website: p.Organization.Website,
		}
	}
	return body
}

// NewUpdateCommitteeMemberRequestBody builds the HTTP request body from the
// payload of the "update-committee-member" endpoint of the "committee-service"
// service.
func NewUpdateCommitteeMemberRequestBody(p *committeeservice.UpdateCommitteeMemberPayload) *UpdateCommitteeMemberRequestBody {
	body := &UpdateCommitteeMemberRequestBody{
		Username:    p.Username,
		Email:       p.Email,
		FirstName:   p.FirstName,
		LastName:    p.LastName,
		JobTitle:    p.JobTitle,
		AppointedBy: p.AppointedBy,
		Status:      p.Status,
		Agency:      p.Agency,
		Country:     p.Country,
	}
	if p.Role != nil {
		body.Role = &struct {
			// Committee role name
			Name string `form:"name" json:"name" xml:"name"`
			// Role start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Role end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Name:      p.Role.Name,
			StartDate: p.Role.StartDate,
			EndDate:   p.Role.EndDate,
		}
		{
			var zero string
			if body.Role.Name == zero {
				body.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if body.AppointedBy == zero {
			body.AppointedBy = "None"
		}
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "Active"
		}
	}
	if p.Voting != nil {
		body.Voting = &struct {
			// Voting status
			Status string `form:"status" json:"status" xml:"status"`
			// Voting start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Voting end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Status:    p.Voting.Status,
			StartDate: p.Voting.StartDate,
			EndDate:   p.Voting.EndDate,
		}
		{
			var zero string
			if body.Voting.Status == zero {
				body.Voting.Status = "None"
			}
		}
	}
	if p.Organization != nil {
		body.Organization = &struct {
			// Organization name
			Name *string `form:"name" json:"name" xml:"name"`
			// Organization website URL
			Website *string `form:"website" json:"website" xml:"website"`
		}{
			Name:    p.Organization.Name,
			Website: p.Organization.Website,
		}
	}
	return body
}

// NewCreateCommitteeCommitteeFullWithReadonlyAttributesCreated builds a
// "committee-service" service "create-committee" endpoint result from a HTTP
// "Created" response.
func NewCreateCommitteeCommitteeFullWithReadonlyAttributesCreated(body *CreateCommitteeResponseBody) *committeeservice.CommitteeFullWithReadonlyAttributes {
	v := &committeeservice.CommitteeFullWithReadonlyAttributes{
		UID:              body.UID,
		ProjectUID:       body.ProjectUID,
		Name:             body.Name,
		Category:         body.Category,
		Description:      body.Description,
		Website:          body.Website,
		DisplayName:      body.DisplayName,
		ParentUID:        body.ParentUID,
		SsoGroupName:     body.SsoGroupName,
		TotalMembers:     body.TotalMembers,
		TotalVotingRepos: body.TotalVotingRepos,
		LastReviewedAt:   body.LastReviewedAt,
		LastReviewedBy:   body.LastReviewedBy,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.RequiresReview != nil {
		v.RequiresReview = *body.RequiresReview
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.BusinessEmailRequired != nil {
		v.BusinessEmailRequired = *body.BusinessEmailRequired
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.RequiresReview == nil {
		v.RequiresReview = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}
	if body.BusinessEmailRequired == nil {
		v.BusinessEmailRequired = false
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewCreateCommitteeBadRequest builds a committee-service service
// create-committee endpoint BadRequest error.
func NewCreateCommitteeBadRequest(body *CreateCommitteeBadRequestResponseBody) *committeeservice.BadRequestError {
	v := &committeeservice.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeConflict builds a committee-service service
// create-committee endpoint Conflict error.
func NewCreateCommitteeConflict(body *CreateCommitteeConflictResponseBody) *committeeservice.ConflictError {
	v := &committeeservice.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeInternalServerError builds a committee-service service
// create-committee endpoint InternalServerError error.
func NewCreateCommitteeInternalServerError(body *CreateCommitteeInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeNotFound builds a committee-service service
// create-committee endpoint NotFound error.
func NewCreateCommitteeNotFound(body *CreateCommitteeNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeServiceUnavailable builds a committee-service service
// create-committee endpoint ServiceUnavailable error.
func NewCreateCommitteeServiceUnavailable(body *CreateCommitteeServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeBaseResultOK builds a "committee-service" service
// "get-committee-base" endpoint result from a HTTP "OK" response.
func NewGetCommitteeBaseResultOK(body *GetCommitteeBaseResponseBody, etag *string) *committeeservice.GetCommitteeBaseResult {
	v := &committeeservice.CommitteeBaseWithReadonlyAttributes{
		UID:              body.UID,
		ProjectUID:       body.ProjectUID,
		Name:             body.Name,
		Category:         body.Category,
		Description:      body.Description,
		Website:          body.Website,
		DisplayName:      body.DisplayName,
		ParentUID:        body.ParentUID,
		ProjectName:      body.ProjectName,
		SsoGroupName:     body.SsoGroupName,
		TotalMembers:     body.TotalMembers,
		TotalVotingRepos: body.TotalVotingRepos,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.RequiresReview != nil {
		v.RequiresReview = *body.RequiresReview
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.RequiresReview == nil {
		v.RequiresReview = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}
	res := &committeeservice.GetCommitteeBaseResult{
		CommitteeBase: v,
	}
	res.Etag = etag

	return res
}

// NewGetCommitteeBaseInternalServerError builds a committee-service service
// get-committee-base endpoint InternalServerError error.
func NewGetCommitteeBaseInternalServerError(body *GetCommitteeBaseInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeBaseNotFound builds a committee-service service
// get-committee-base endpoint NotFound error.
func NewGetCommitteeBaseNotFound(body *GetCommitteeBaseNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeBaseServiceUnavailable builds a committee-service service
// get-committee-base endpoint ServiceUnavailable error.
func NewGetCommitteeBaseServiceUnavailable(body *GetCommitteeBaseServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeBaseCommitteeBaseWithReadonlyAttributesOK builds a
// "committee-service" service "update-committee-base" endpoint result from a
// HTTP "OK" response.
func NewUpdateCommitteeBaseCommitteeBaseWithReadonlyAttributesOK(body *UpdateCommitteeBaseResponseBody) *committeeservice.CommitteeBaseWithReadonlyAttributes {
	v := &committeeservice.CommitteeBaseWithReadonlyAttributes{
		UID:              body.UID,
		ProjectUID:       body.ProjectUID,
		Name:             body.Name,
		Category:         body.Category,
		Description:      body.Description,
		Website:          body.Website,
		DisplayName:      body.DisplayName,
		ParentUID:        body.ParentUID,
		ProjectName:      body.ProjectName,
		SsoGroupName:     body.SsoGroupName,
		TotalMembers:     body.TotalMembers,
		TotalVotingRepos: body.TotalVotingRepos,
	}
	if body.EnableVoting != nil {
		v.EnableVoting = *body.EnableVoting
	}
	if body.SsoGroupEnabled != nil {
		v.SsoGroupEnabled = *body.SsoGroupEnabled
	}
	if body.RequiresReview != nil {
		v.RequiresReview = *body.RequiresReview
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.EnableVoting == nil {
		v.EnableVoting = false
	}
	if body.SsoGroupEnabled == nil {
		v.SsoGroupEnabled = false
	}
	if body.RequiresReview == nil {
		v.RequiresReview = false
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Calendar != nil {
		v.Calendar = &struct {
			// Whether the committee calendar is publicly visible
			Public bool
		}{}
		if body.Calendar.Public != nil {
			v.Calendar.Public = *body.Calendar.Public
		}
		if body.Calendar.Public == nil {
			v.Calendar.Public = false
		}
	}

	return v
}

// NewUpdateCommitteeBaseBadRequest builds a committee-service service
// update-committee-base endpoint BadRequest error.
func NewUpdateCommitteeBaseBadRequest(body *UpdateCommitteeBaseBadRequestResponseBody) *committeeservice.BadRequestError {
	v := &committeeservice.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeBaseConflict builds a committee-service service
// update-committee-base endpoint Conflict error.
func NewUpdateCommitteeBaseConflict(body *UpdateCommitteeBaseConflictResponseBody) *committeeservice.ConflictError {
	v := &committeeservice.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeBaseInternalServerError builds a committee-service service
// update-committee-base endpoint InternalServerError error.
func NewUpdateCommitteeBaseInternalServerError(body *UpdateCommitteeBaseInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeBaseNotFound builds a committee-service service
// update-committee-base endpoint NotFound error.
func NewUpdateCommitteeBaseNotFound(body *UpdateCommitteeBaseNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeBaseServiceUnavailable builds a committee-service service
// update-committee-base endpoint ServiceUnavailable error.
func NewUpdateCommitteeBaseServiceUnavailable(body *UpdateCommitteeBaseServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeBadRequest builds a committee-service service
// delete-committee endpoint BadRequest error.
func NewDeleteCommitteeBadRequest(body *DeleteCommitteeBadRequestResponseBody) *committeeservice.BadRequestError {
	v := &committeeservice.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeConflict builds a committee-service service
// delete-committee endpoint Conflict error.
func NewDeleteCommitteeConflict(body *DeleteCommitteeConflictResponseBody) *committeeservice.ConflictError {
	v := &committeeservice.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeInternalServerError builds a committee-service service
// delete-committee endpoint InternalServerError error.
func NewDeleteCommitteeInternalServerError(body *DeleteCommitteeInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeNotFound builds a committee-service service
// delete-committee endpoint NotFound error.
func NewDeleteCommitteeNotFound(body *DeleteCommitteeNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeServiceUnavailable builds a committee-service service
// delete-committee endpoint ServiceUnavailable error.
func NewDeleteCommitteeServiceUnavailable(body *DeleteCommitteeServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeSettingsResultOK builds a "committee-service" service
// "get-committee-settings" endpoint result from a HTTP "OK" response.
func NewGetCommitteeSettingsResultOK(body *GetCommitteeSettingsResponseBody, etag *string) *committeeservice.GetCommitteeSettingsResult {
	v := &committeeservice.CommitteeSettingsWithReadonlyAttributes{
		UID:            body.UID,
		LastReviewedAt: body.LastReviewedAt,
		LastReviewedBy: body.LastReviewedBy,
		CreatedAt:      body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	if body.BusinessEmailRequired != nil {
		v.BusinessEmailRequired = *body.BusinessEmailRequired
	}
	if body.BusinessEmailRequired == nil {
		v.BusinessEmailRequired = false
	}
	res := &committeeservice.GetCommitteeSettingsResult{
		CommitteeSettings: v,
	}
	res.Etag = etag

	return res
}

// NewGetCommitteeSettingsInternalServerError builds a committee-service
// service get-committee-settings endpoint InternalServerError error.
func NewGetCommitteeSettingsInternalServerError(body *GetCommitteeSettingsInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeSettingsNotFound builds a committee-service service
// get-committee-settings endpoint NotFound error.
func NewGetCommitteeSettingsNotFound(body *GetCommitteeSettingsNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeSettingsServiceUnavailable builds a committee-service service
// get-committee-settings endpoint ServiceUnavailable error.
func NewGetCommitteeSettingsServiceUnavailable(body *GetCommitteeSettingsServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeSettingsCommitteeSettingsWithReadonlyAttributesOK builds a
// "committee-service" service "update-committee-settings" endpoint result from
// a HTTP "OK" response.
func NewUpdateCommitteeSettingsCommitteeSettingsWithReadonlyAttributesOK(body *UpdateCommitteeSettingsResponseBody) *committeeservice.CommitteeSettingsWithReadonlyAttributes {
	v := &committeeservice.CommitteeSettingsWithReadonlyAttributes{
		UID:            body.UID,
		LastReviewedAt: body.LastReviewedAt,
		LastReviewedBy: body.LastReviewedBy,
		CreatedAt:      body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
	}
	if body.BusinessEmailRequired != nil {
		v.BusinessEmailRequired = *body.BusinessEmailRequired
	}
	if body.BusinessEmailRequired == nil {
		v.BusinessEmailRequired = false
	}

	return v
}

// NewUpdateCommitteeSettingsBadRequest builds a committee-service service
// update-committee-settings endpoint BadRequest error.
func NewUpdateCommitteeSettingsBadRequest(body *UpdateCommitteeSettingsBadRequestResponseBody) *committeeservice.BadRequestError {
	v := &committeeservice.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeSettingsConflict builds a committee-service service
// update-committee-settings endpoint Conflict error.
func NewUpdateCommitteeSettingsConflict(body *UpdateCommitteeSettingsConflictResponseBody) *committeeservice.ConflictError {
	v := &committeeservice.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeSettingsInternalServerError builds a committee-service
// service update-committee-settings endpoint InternalServerError error.
func NewUpdateCommitteeSettingsInternalServerError(body *UpdateCommitteeSettingsInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeSettingsNotFound builds a committee-service service
// update-committee-settings endpoint NotFound error.
func NewUpdateCommitteeSettingsNotFound(body *UpdateCommitteeSettingsNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeSettingsServiceUnavailable builds a committee-service
// service update-committee-settings endpoint ServiceUnavailable error.
func NewUpdateCommitteeSettingsServiceUnavailable(body *UpdateCommitteeSettingsServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewReadyzServiceUnavailable builds a committee-service service readyz
// endpoint ServiceUnavailable error.
func NewReadyzServiceUnavailable(body *ReadyzServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeMemberCommitteeMemberFullWithReadonlyAttributesCreated
// builds a "committee-service" service "create-committee-member" endpoint
// result from a HTTP "Created" response.
func NewCreateCommitteeMemberCommitteeMemberFullWithReadonlyAttributesCreated(body *CreateCommitteeMemberResponseBody) *committeeservice.CommitteeMemberFullWithReadonlyAttributes {
	v := &committeeservice.CommitteeMemberFullWithReadonlyAttributes{
		UID:           body.UID,
		CommitteeUID:  body.CommitteeUID,
		CommitteeName: body.CommitteeName,
		Username:      body.Username,
		Email:         body.Email,
		FirstName:     body.FirstName,
		LastName:      body.LastName,
		JobTitle:      body.JobTitle,
		Agency:        body.Agency,
		Country:       body.Country,
		CreatedAt:     body.CreatedAt,
		UpdatedAt:     body.UpdatedAt,
	}
	if body.AppointedBy != nil {
		v.AppointedBy = *body.AppointedBy
	}
	if body.Status != nil {
		v.Status = *body.Status
	}
	if body.Role != nil {
		v.Role = &struct {
			// Committee role name
			Name string
			// Role start date
			StartDate *string
			// Role end date
			EndDate *string
		}{
			StartDate: body.Role.StartDate,
			EndDate:   body.Role.EndDate,
		}
		if body.Role.Name != nil {
			v.Role.Name = *body.Role.Name
		}
		if body.Role.Name == nil {
			v.Role.Name = "None"
		}
	}
	if body.AppointedBy == nil {
		v.AppointedBy = "None"
	}
	if body.Status == nil {
		v.Status = "Active"
	}
	if body.Voting != nil {
		v.Voting = &struct {
			// Voting status
			Status string
			// Voting start date
			StartDate *string
			// Voting end date
			EndDate *string
		}{
			StartDate: body.Voting.StartDate,
			EndDate:   body.Voting.EndDate,
		}
		if body.Voting.Status != nil {
			v.Voting.Status = *body.Voting.Status
		}
		if body.Voting.Status == nil {
			v.Voting.Status = "None"
		}
	}
	if body.Organization != nil {
		v.Organization = &struct {
			// Organization name
			Name *string
			// Organization website URL
			Website *string
		}{
			Name:    body.Organization.Name,
			Website: body.Organization.Website,
		}
	}

	return v
}

// NewCreateCommitteeMemberBadRequest builds a committee-service service
// create-committee-member endpoint BadRequest error.
func NewCreateCommitteeMemberBadRequest(body *CreateCommitteeMemberBadRequestResponseBody) *committeeservice.BadRequestError {
	v := &committeeservice.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeMemberConflict builds a committee-service service
// create-committee-member endpoint Conflict error.
func NewCreateCommitteeMemberConflict(body *CreateCommitteeMemberConflictResponseBody) *committeeservice.ConflictError {
	v := &committeeservice.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeMemberInternalServerError builds a committee-service
// service create-committee-member endpoint InternalServerError error.
func NewCreateCommitteeMemberInternalServerError(body *CreateCommitteeMemberInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeMemberNotFound builds a committee-service service
// create-committee-member endpoint NotFound error.
func NewCreateCommitteeMemberNotFound(body *CreateCommitteeMemberNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewCreateCommitteeMemberServiceUnavailable builds a committee-service
// service create-committee-member endpoint ServiceUnavailable error.
func NewCreateCommitteeMemberServiceUnavailable(body *CreateCommitteeMemberServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeMemberResultOK builds a "committee-service" service
// "get-committee-member" endpoint result from a HTTP "OK" response.
func NewGetCommitteeMemberResultOK(body *GetCommitteeMemberResponseBody, etag *string) *committeeservice.GetCommitteeMemberResult {
	v := &committeeservice.CommitteeMemberFullWithReadonlyAttributes{
		UID:           body.UID,
		CommitteeUID:  body.CommitteeUID,
		CommitteeName: body.CommitteeName,
		Username:      body.Username,
		Email:         body.Email,
		FirstName:     body.FirstName,
		LastName:      body.LastName,
		JobTitle:      body.JobTitle,
		Agency:        body.Agency,
		Country:       body.Country,
		CreatedAt:     body.CreatedAt,
		UpdatedAt:     body.UpdatedAt,
	}
	if body.AppointedBy != nil {
		v.AppointedBy = *body.AppointedBy
	}
	if body.Status != nil {
		v.Status = *body.Status
	}
	if body.Role != nil {
		v.Role = &struct {
			// Committee role name
			Name string
			// Role start date
			StartDate *string
			// Role end date
			EndDate *string
		}{
			StartDate: body.Role.StartDate,
			EndDate:   body.Role.EndDate,
		}
		if body.Role.Name != nil {
			v.Role.Name = *body.Role.Name
		}
		if body.Role.Name == nil {
			v.Role.Name = "None"
		}
	}
	if body.AppointedBy == nil {
		v.AppointedBy = "None"
	}
	if body.Status == nil {
		v.Status = "Active"
	}
	if body.Voting != nil {
		v.Voting = &struct {
			// Voting status
			Status string
			// Voting start date
			StartDate *string
			// Voting end date
			EndDate *string
		}{
			StartDate: body.Voting.StartDate,
			EndDate:   body.Voting.EndDate,
		}
		if body.Voting.Status != nil {
			v.Voting.Status = *body.Voting.Status
		}
		if body.Voting.Status == nil {
			v.Voting.Status = "None"
		}
	}
	if body.Organization != nil {
		v.Organization = &struct {
			// Organization name
			Name *string
			// Organization website URL
			Website *string
		}{
			Name:    body.Organization.Name,
			Website: body.Organization.Website,
		}
	}
	res := &committeeservice.GetCommitteeMemberResult{
		Member: v,
	}
	res.Etag = etag

	return res
}

// NewGetCommitteeMemberBadRequest builds a committee-service service
// get-committee-member endpoint BadRequest error.
func NewGetCommitteeMemberBadRequest(body *GetCommitteeMemberBadRequestResponseBody) *committeeservice.BadRequestError {
	v := &committeeservice.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeMemberInternalServerError builds a committee-service service
// get-committee-member endpoint InternalServerError error.
func NewGetCommitteeMemberInternalServerError(body *GetCommitteeMemberInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeMemberNotFound builds a committee-service service
// get-committee-member endpoint NotFound error.
func NewGetCommitteeMemberNotFound(body *GetCommitteeMemberNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewGetCommitteeMemberServiceUnavailable builds a committee-service service
// get-committee-member endpoint ServiceUnavailable error.
func NewGetCommitteeMemberServiceUnavailable(body *GetCommitteeMemberServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeMemberCommitteeMemberFullWithReadonlyAttributesOK builds a
// "committee-service" service "update-committee-member" endpoint result from a
// HTTP "OK" response.
func NewUpdateCommitteeMemberCommitteeMemberFullWithReadonlyAttributesOK(body *UpdateCommitteeMemberResponseBody) *committeeservice.CommitteeMemberFullWithReadonlyAttributes {
	v := &committeeservice.CommitteeMemberFullWithReadonlyAttributes{
		UID:           body.UID,
		CommitteeUID:  body.CommitteeUID,
		CommitteeName: body.CommitteeName,
		Username:      body.Username,
		Email:         body.Email,
		FirstName:     body.FirstName,
		LastName:      body.LastName,
		JobTitle:      body.JobTitle,
		Agency:        body.Agency,
		Country:       body.Country,
		CreatedAt:     body.CreatedAt,
		UpdatedAt:     body.UpdatedAt,
	}
	if body.AppointedBy != nil {
		v.AppointedBy = *body.AppointedBy
	}
	if body.Status != nil {
		v.Status = *body.Status
	}
	if body.Role != nil {
		v.Role = &struct {
			// Committee role name
			Name string
			// Role start date
			StartDate *string
			// Role end date
			EndDate *string
		}{
			StartDate: body.Role.StartDate,
			EndDate:   body.Role.EndDate,
		}
		if body.Role.Name != nil {
			v.Role.Name = *body.Role.Name
		}
		if body.Role.Name == nil {
			v.Role.Name = "None"
		}
	}
	if body.AppointedBy == nil {
		v.AppointedBy = "None"
	}
	if body.Status == nil {
		v.Status = "Active"
	}
	if body.Voting != nil {
		v.Voting = &struct {
			// Voting status
			Status string
			// Voting start date
			StartDate *string
			// Voting end date
			EndDate *string
		}{
			StartDate: body.Voting.StartDate,
			EndDate:   body.Voting.EndDate,
		}
		if body.Voting.Status != nil {
			v.Voting.Status = *body.Voting.Status
		}
		if body.Voting.Status == nil {
			v.Voting.Status = "None"
		}
	}
	if body.Organization != nil {
		v.Organization = &struct {
			// Organization name
			Name *string
			// Organization website URL
			Website *string
		}{
			Name:    body.Organization.Name,
			Website: body.Organization.Website,
		}
	}

	return v
}

// NewUpdateCommitteeMemberBadRequest builds a committee-service service
// update-committee-member endpoint BadRequest error.
func NewUpdateCommitteeMemberBadRequest(body *UpdateCommitteeMemberBadRequestResponseBody) *committeeservice.BadRequestError {
	v := &committeeservice.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeMemberConflict builds a committee-service service
// update-committee-member endpoint Conflict error.
func NewUpdateCommitteeMemberConflict(body *UpdateCommitteeMemberConflictResponseBody) *committeeservice.ConflictError {
	v := &committeeservice.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeMemberInternalServerError builds a committee-service
// service update-committee-member endpoint InternalServerError error.
func NewUpdateCommitteeMemberInternalServerError(body *UpdateCommitteeMemberInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeMemberNotFound builds a committee-service service
// update-committee-member endpoint NotFound error.
func NewUpdateCommitteeMemberNotFound(body *UpdateCommitteeMemberNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateCommitteeMemberServiceUnavailable builds a committee-service
// service update-committee-member endpoint ServiceUnavailable error.
func NewUpdateCommitteeMemberServiceUnavailable(body *UpdateCommitteeMemberServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeMemberBadRequest builds a committee-service service
// delete-committee-member endpoint BadRequest error.
func NewDeleteCommitteeMemberBadRequest(body *DeleteCommitteeMemberBadRequestResponseBody) *committeeservice.BadRequestError {
	v := &committeeservice.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeMemberConflict builds a committee-service service
// delete-committee-member endpoint Conflict error.
func NewDeleteCommitteeMemberConflict(body *DeleteCommitteeMemberConflictResponseBody) *committeeservice.ConflictError {
	v := &committeeservice.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeMemberInternalServerError builds a committee-service
// service delete-committee-member endpoint InternalServerError error.
func NewDeleteCommitteeMemberInternalServerError(body *DeleteCommitteeMemberInternalServerErrorResponseBody) *committeeservice.InternalServerError {
	v := &committeeservice.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeMemberNotFound builds a committee-service service
// delete-committee-member endpoint NotFound error.
func NewDeleteCommitteeMemberNotFound(body *DeleteCommitteeMemberNotFoundResponseBody) *committeeservice.NotFoundError {
	v := &committeeservice.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteCommitteeMemberServiceUnavailable builds a committee-service
// service delete-committee-member endpoint ServiceUnavailable error.
func NewDeleteCommitteeMemberServiceUnavailable(body *DeleteCommitteeMemberServiceUnavailableResponseBody) *committeeservice.ServiceUnavailableError {
	v := &committeeservice.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// ValidateCreateCommitteeResponseBody runs the validations defined on
// Create-CommitteeResponseBody
func ValidateCreateCommitteeResponseBody(body *CreateCommitteeResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.DisplayName != nil {
		if utf8.RuneCountInString(*body.DisplayName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
		}
	}
	if body.ParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
	}
	if body.TotalMembers != nil {
		if *body.TotalMembers < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.total_members", *body.TotalMembers, 0, true))
		}
	}
	if body.TotalVotingRepos != nil {
		if *body.TotalVotingRepos < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.total_voting_repos", *body.TotalVotingRepos, 0, true))
		}
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetCommitteeBaseResponseBody runs the validations defined on
// Get-Committee-BaseResponseBody
func ValidateGetCommitteeBaseResponseBody(body *GetCommitteeBaseResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.DisplayName != nil {
		if utf8.RuneCountInString(*body.DisplayName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
		}
	}
	if body.ParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
	}
	if body.ProjectName != nil {
		if utf8.RuneCountInString(*body.ProjectName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.project_name", *body.ProjectName, utf8.RuneCountInString(*body.ProjectName), 100, false))
		}
	}
	if body.TotalMembers != nil {
		if *body.TotalMembers < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.total_members", *body.TotalMembers, 0, true))
		}
	}
	if body.TotalVotingRepos != nil {
		if *body.TotalVotingRepos < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.total_voting_repos", *body.TotalVotingRepos, 0, true))
		}
	}
	return
}

// ValidateUpdateCommitteeBaseResponseBody runs the validations defined on
// Update-Committee-BaseResponseBody
func ValidateUpdateCommitteeBaseResponseBody(body *UpdateCommitteeBaseResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.DisplayName != nil {
		if utf8.RuneCountInString(*body.DisplayName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
		}
	}
	if body.ParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
	}
	if body.ProjectName != nil {
		if utf8.RuneCountInString(*body.ProjectName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.project_name", *body.ProjectName, utf8.RuneCountInString(*body.ProjectName), 100, false))
		}
	}
	if body.TotalMembers != nil {
		if *body.TotalMembers < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.total_members", *body.TotalMembers, 0, true))
		}
	}
	if body.TotalVotingRepos != nil {
		if *body.TotalVotingRepos < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.total_voting_repos", *body.TotalVotingRepos, 0, true))
		}
	}
	return
}

// ValidateGetCommitteeSettingsResponseBody runs the validations defined on
// Get-Committee-SettingsResponseBody
func ValidateGetCommitteeSettingsResponseBody(body *GetCommitteeSettingsResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateCommitteeSettingsResponseBody runs the validations defined on
// Update-Committee-SettingsResponseBody
func ValidateUpdateCommitteeSettingsResponseBody(body *UpdateCommitteeSettingsResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateCreateCommitteeMemberResponseBody runs the validations defined on
// Create-Committee-MemberResponseBody
func ValidateCreateCommitteeMemberResponseBody(body *CreateCommitteeMemberResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	if body.CommitteeName != nil {
		if utf8.RuneCountInString(*body.CommitteeName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.committee_name", *body.CommitteeName, utf8.RuneCountInString(*body.CommitteeName), 100, false))
		}
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
		}
	}
	if body.Role != nil {
		if body.Role.Name != nil {
			if !(*body.Role.Name == "Chair" || *body.Role.Name == "Counsel" || *body.Role.Name == "Developer Seat" || *body.Role.Name == "TAC/TOC Representative" || *body.Role.Name == "Director" || *body.Role.Name == "Lead" || *body.Role.Name == "None" || *body.Role.Name == "Secretary" || *body.Role.Name == "Treasurer" || *body.Role.Name == "Vice Chair" || *body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", *body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
		}
		if body.Role.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
		}
		if body.Role.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
		}
	}
	if body.AppointedBy != nil {
		if !(*body.AppointedBy == "Community" || *body.AppointedBy == "Membership Entitlement" || *body.AppointedBy == "Vote of End User Member Class" || *body.AppointedBy == "Vote of TSC Committee" || *body.AppointedBy == "Vote of TAC Committee" || *body.AppointedBy == "Vote of Academic Member Class" || *body.AppointedBy == "Vote of Lab Member Class" || *body.AppointedBy == "Vote of Marketing Committee" || *body.AppointedBy == "Vote of Governing Board" || *body.AppointedBy == "Vote of General Member Class" || *body.AppointedBy == "Vote of End User Committee" || *body.AppointedBy == "Vote of TOC Committee" || *body.AppointedBy == "Vote of Gold Member Class" || *body.AppointedBy == "Vote of Silver Member Class" || *body.AppointedBy == "Vote of Strategic Membership Class" || *body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", *body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Active" || *body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"Active", "Inactive"}))
		}
	}
	if body.Voting != nil {
		if body.Voting.Status != nil {
			if !(*body.Voting.Status == "Alternate Voting Rep" || *body.Voting.Status == "Observer" || *body.Voting.Status == "Voting Rep" || *body.Voting.Status == "Emeritus" || *body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", *body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
		}
		if body.Voting.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
		}
		if body.Voting.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
		}
	}
	if body.Agency != nil {
		if utf8.RuneCountInString(*body.Agency) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
		}
	}
	if body.Country != nil {
		if utf8.RuneCountInString(*body.Country) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
		}
	}
	if body.Organization != nil {
		if body.Organization.Name != nil {
			if utf8.RuneCountInString(*body.Organization.Name) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
			}
		}
		if body.Organization.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetCommitteeMemberResponseBody runs the validations defined on
// Get-Committee-MemberResponseBody
func ValidateGetCommitteeMemberResponseBody(body *GetCommitteeMemberResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	if body.CommitteeName != nil {
		if utf8.RuneCountInString(*body.CommitteeName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.committee_name", *body.CommitteeName, utf8.RuneCountInString(*body.CommitteeName), 100, false))
		}
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
		}
	}
	if body.Role != nil {
		if body.Role.Name != nil {
			if !(*body.Role.Name == "Chair" || *body.Role.Name == "Counsel" || *body.Role.Name == "Developer Seat" || *body.Role.Name == "TAC/TOC Representative" || *body.Role.Name == "Director" || *body.Role.Name == "Lead" || *body.Role.Name == "None" || *body.Role.Name == "Secretary" || *body.Role.Name == "Treasurer" || *body.Role.Name == "Vice Chair" || *body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", *body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
		}
		if body.Role.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
		}
		if body.Role.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
		}
	}
	if body.AppointedBy != nil {
		if !(*body.AppointedBy == "Community" || *body.AppointedBy == "Membership Entitlement" || *body.AppointedBy == "Vote of End User Member Class" || *body.AppointedBy == "Vote of TSC Committee" || *body.AppointedBy == "Vote of TAC Committee" || *body.AppointedBy == "Vote of Academic Member Class" || *body.AppointedBy == "Vote of Lab Member Class" || *body.AppointedBy == "Vote of Marketing Committee" || *body.AppointedBy == "Vote of Governing Board" || *body.AppointedBy == "Vote of General Member Class" || *body.AppointedBy == "Vote of End User Committee" || *body.AppointedBy == "Vote of TOC Committee" || *body.AppointedBy == "Vote of Gold Member Class" || *body.AppointedBy == "Vote of Silver Member Class" || *body.AppointedBy == "Vote of Strategic Membership Class" || *body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", *body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Active" || *body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"Active", "Inactive"}))
		}
	}
	if body.Voting != nil {
		if body.Voting.Status != nil {
			if !(*body.Voting.Status == "Alternate Voting Rep" || *body.Voting.Status == "Observer" || *body.Voting.Status == "Voting Rep" || *body.Voting.Status == "Emeritus" || *body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", *body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
		}
		if body.Voting.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
		}
		if body.Voting.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
		}
	}
	if body.Agency != nil {
		if utf8.RuneCountInString(*body.Agency) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
		}
	}
	if body.Country != nil {
		if utf8.RuneCountInString(*body.Country) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
		}
	}
	if body.Organization != nil {
		if body.Organization.Name != nil {
			if utf8.RuneCountInString(*body.Organization.Name) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
			}
		}
		if body.Organization.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateCommitteeMemberResponseBody runs the validations defined on
// Update-Committee-MemberResponseBody
func ValidateUpdateCommitteeMemberResponseBody(body *UpdateCommitteeMemberResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	if body.CommitteeName != nil {
		if utf8.RuneCountInString(*body.CommitteeName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.committee_name", *body.CommitteeName, utf8.RuneCountInString(*body.CommitteeName), 100, false))
		}
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
		}
	}
	if body.Role != nil {
		if body.Role.Name != nil {
			if !(*body.Role.Name == "Chair" || *body.Role.Name == "Counsel" || *body.Role.Name == "Developer Seat" || *body.Role.Name == "TAC/TOC Representative" || *body.Role.Name == "Director" || *body.Role.Name == "Lead" || *body.Role.Name == "None" || *body.Role.Name == "Secretary" || *body.Role.Name == "Treasurer" || *body.Role.Name == "Vice Chair" || *body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", *body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
		}
		if body.Role.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
		}
		if body.Role.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
		}
	}
	if body.AppointedBy != nil {
		if !(*body.AppointedBy == "Community" || *body.AppointedBy == "Membership Entitlement" || *body.AppointedBy == "Vote of End User Member Class" || *body.AppointedBy == "Vote of TSC Committee" || *body.AppointedBy == "Vote of TAC Committee" || *body.AppointedBy == "Vote of Academic Member Class" || *body.AppointedBy == "Vote of Lab Member Class" || *body.AppointedBy == "Vote of Marketing Committee" || *body.AppointedBy == "Vote of Governing Board" || *body.AppointedBy == "Vote of General Member Class" || *body.AppointedBy == "Vote of End User Committee" || *body.AppointedBy == "Vote of TOC Committee" || *body.AppointedBy == "Vote of Gold Member Class" || *body.AppointedBy == "Vote of Silver Member Class" || *body.AppointedBy == "Vote of Strategic Membership Class" || *body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", *body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Active" || *body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"Active", "Inactive"}))
		}
	}
	if body.Voting != nil {
		if body.Voting.Status != nil {
			if !(*body.Voting.Status == "Alternate Voting Rep" || *body.Voting.Status == "Observer" || *body.Voting.Status == "Voting Rep" || *body.Voting.Status == "Emeritus" || *body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", *body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
		}
		if body.Voting.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
		}
		if body.Voting.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
		}
	}
	if body.Agency != nil {
		if utf8.RuneCountInString(*body.Agency) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
		}
	}
	if body.Country != nil {
		if utf8.RuneCountInString(*body.Country) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
		}
	}
	if body.Organization != nil {
		if body.Organization.Name != nil {
			if utf8.RuneCountInString(*body.Organization.Name) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
			}
		}
		if body.Organization.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateCreateCommitteeBadRequestResponseBody runs the validations defined
// on create-committee_BadRequest_response_body
func ValidateCreateCommitteeBadRequestResponseBody(body *CreateCommitteeBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeConflictResponseBody runs the validations defined on
// create-committee_Conflict_response_body
func ValidateCreateCommitteeConflictResponseBody(body *CreateCommitteeConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeInternalServerErrorResponseBody runs the validations
// defined on create-committee_InternalServerError_response_body
func ValidateCreateCommitteeInternalServerErrorResponseBody(body *CreateCommitteeInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeNotFoundResponseBody runs the validations defined on
// create-committee_NotFound_response_body
func ValidateCreateCommitteeNotFoundResponseBody(body *CreateCommitteeNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeServiceUnavailableResponseBody runs the validations
// defined on create-committee_ServiceUnavailable_response_body
func ValidateCreateCommitteeServiceUnavailableResponseBody(body *CreateCommitteeServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeBaseInternalServerErrorResponseBody runs the validations
// defined on get-committee-base_InternalServerError_response_body
func ValidateGetCommitteeBaseInternalServerErrorResponseBody(body *GetCommitteeBaseInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeBaseNotFoundResponseBody runs the validations defined on
// get-committee-base_NotFound_response_body
func ValidateGetCommitteeBaseNotFoundResponseBody(body *GetCommitteeBaseNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeBaseServiceUnavailableResponseBody runs the validations
// defined on get-committee-base_ServiceUnavailable_response_body
func ValidateGetCommitteeBaseServiceUnavailableResponseBody(body *GetCommitteeBaseServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeBaseBadRequestResponseBody runs the validations
// defined on update-committee-base_BadRequest_response_body
func ValidateUpdateCommitteeBaseBadRequestResponseBody(body *UpdateCommitteeBaseBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeBaseConflictResponseBody runs the validations defined
// on update-committee-base_Conflict_response_body
func ValidateUpdateCommitteeBaseConflictResponseBody(body *UpdateCommitteeBaseConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeBaseInternalServerErrorResponseBody runs the
// validations defined on
// update-committee-base_InternalServerError_response_body
func ValidateUpdateCommitteeBaseInternalServerErrorResponseBody(body *UpdateCommitteeBaseInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeBaseNotFoundResponseBody runs the validations defined
// on update-committee-base_NotFound_response_body
func ValidateUpdateCommitteeBaseNotFoundResponseBody(body *UpdateCommitteeBaseNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeBaseServiceUnavailableResponseBody runs the
// validations defined on update-committee-base_ServiceUnavailable_response_body
func ValidateUpdateCommitteeBaseServiceUnavailableResponseBody(body *UpdateCommitteeBaseServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeBadRequestResponseBody runs the validations defined
// on delete-committee_BadRequest_response_body
func ValidateDeleteCommitteeBadRequestResponseBody(body *DeleteCommitteeBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeConflictResponseBody runs the validations defined on
// delete-committee_Conflict_response_body
func ValidateDeleteCommitteeConflictResponseBody(body *DeleteCommitteeConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeInternalServerErrorResponseBody runs the validations
// defined on delete-committee_InternalServerError_response_body
func ValidateDeleteCommitteeInternalServerErrorResponseBody(body *DeleteCommitteeInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeNotFoundResponseBody runs the validations defined on
// delete-committee_NotFound_response_body
func ValidateDeleteCommitteeNotFoundResponseBody(body *DeleteCommitteeNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeServiceUnavailableResponseBody runs the validations
// defined on delete-committee_ServiceUnavailable_response_body
func ValidateDeleteCommitteeServiceUnavailableResponseBody(body *DeleteCommitteeServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeSettingsInternalServerErrorResponseBody runs the
// validations defined on
// get-committee-settings_InternalServerError_response_body
func ValidateGetCommitteeSettingsInternalServerErrorResponseBody(body *GetCommitteeSettingsInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeSettingsNotFoundResponseBody runs the validations
// defined on get-committee-settings_NotFound_response_body
func ValidateGetCommitteeSettingsNotFoundResponseBody(body *GetCommitteeSettingsNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeSettingsServiceUnavailableResponseBody runs the
// validations defined on
// get-committee-settings_ServiceUnavailable_response_body
func ValidateGetCommitteeSettingsServiceUnavailableResponseBody(body *GetCommitteeSettingsServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeSettingsBadRequestResponseBody runs the validations
// defined on update-committee-settings_BadRequest_response_body
func ValidateUpdateCommitteeSettingsBadRequestResponseBody(body *UpdateCommitteeSettingsBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeSettingsConflictResponseBody runs the validations
// defined on update-committee-settings_Conflict_response_body
func ValidateUpdateCommitteeSettingsConflictResponseBody(body *UpdateCommitteeSettingsConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeSettingsInternalServerErrorResponseBody runs the
// validations defined on
// update-committee-settings_InternalServerError_response_body
func ValidateUpdateCommitteeSettingsInternalServerErrorResponseBody(body *UpdateCommitteeSettingsInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeSettingsNotFoundResponseBody runs the validations
// defined on update-committee-settings_NotFound_response_body
func ValidateUpdateCommitteeSettingsNotFoundResponseBody(body *UpdateCommitteeSettingsNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeSettingsServiceUnavailableResponseBody runs the
// validations defined on
// update-committee-settings_ServiceUnavailable_response_body
func ValidateUpdateCommitteeSettingsServiceUnavailableResponseBody(body *UpdateCommitteeSettingsServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReadyzServiceUnavailableResponseBody runs the validations defined on
// readyz_ServiceUnavailable_response_body
func ValidateReadyzServiceUnavailableResponseBody(body *ReadyzServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeMemberBadRequestResponseBody runs the validations
// defined on create-committee-member_BadRequest_response_body
func ValidateCreateCommitteeMemberBadRequestResponseBody(body *CreateCommitteeMemberBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeMemberConflictResponseBody runs the validations
// defined on create-committee-member_Conflict_response_body
func ValidateCreateCommitteeMemberConflictResponseBody(body *CreateCommitteeMemberConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeMemberInternalServerErrorResponseBody runs the
// validations defined on
// create-committee-member_InternalServerError_response_body
func ValidateCreateCommitteeMemberInternalServerErrorResponseBody(body *CreateCommitteeMemberInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeMemberNotFoundResponseBody runs the validations
// defined on create-committee-member_NotFound_response_body
func ValidateCreateCommitteeMemberNotFoundResponseBody(body *CreateCommitteeMemberNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateCommitteeMemberServiceUnavailableResponseBody runs the
// validations defined on
// create-committee-member_ServiceUnavailable_response_body
func ValidateCreateCommitteeMemberServiceUnavailableResponseBody(body *CreateCommitteeMemberServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeMemberBadRequestResponseBody runs the validations
// defined on get-committee-member_BadRequest_response_body
func ValidateGetCommitteeMemberBadRequestResponseBody(body *GetCommitteeMemberBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeMemberInternalServerErrorResponseBody runs the
// validations defined on get-committee-member_InternalServerError_response_body
func ValidateGetCommitteeMemberInternalServerErrorResponseBody(body *GetCommitteeMemberInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeMemberNotFoundResponseBody runs the validations defined
// on get-committee-member_NotFound_response_body
func ValidateGetCommitteeMemberNotFoundResponseBody(body *GetCommitteeMemberNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCommitteeMemberServiceUnavailableResponseBody runs the
// validations defined on get-committee-member_ServiceUnavailable_response_body
func ValidateGetCommitteeMemberServiceUnavailableResponseBody(body *GetCommitteeMemberServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeMemberBadRequestResponseBody runs the validations
// defined on update-committee-member_BadRequest_response_body
func ValidateUpdateCommitteeMemberBadRequestResponseBody(body *UpdateCommitteeMemberBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeMemberConflictResponseBody runs the validations
// defined on update-committee-member_Conflict_response_body
func ValidateUpdateCommitteeMemberConflictResponseBody(body *UpdateCommitteeMemberConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeMemberInternalServerErrorResponseBody runs the
// validations defined on
// update-committee-member_InternalServerError_response_body
func ValidateUpdateCommitteeMemberInternalServerErrorResponseBody(body *UpdateCommitteeMemberInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeMemberNotFoundResponseBody runs the validations
// defined on update-committee-member_NotFound_response_body
func ValidateUpdateCommitteeMemberNotFoundResponseBody(body *UpdateCommitteeMemberNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCommitteeMemberServiceUnavailableResponseBody runs the
// validations defined on
// update-committee-member_ServiceUnavailable_response_body
func ValidateUpdateCommitteeMemberServiceUnavailableResponseBody(body *UpdateCommitteeMemberServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeMemberBadRequestResponseBody runs the validations
// defined on delete-committee-member_BadRequest_response_body
func ValidateDeleteCommitteeMemberBadRequestResponseBody(body *DeleteCommitteeMemberBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeMemberConflictResponseBody runs the validations
// defined on delete-committee-member_Conflict_response_body
func ValidateDeleteCommitteeMemberConflictResponseBody(body *DeleteCommitteeMemberConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeMemberInternalServerErrorResponseBody runs the
// validations defined on
// delete-committee-member_InternalServerError_response_body
func ValidateDeleteCommitteeMemberInternalServerErrorResponseBody(body *DeleteCommitteeMemberInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeMemberNotFoundResponseBody runs the validations
// defined on delete-committee-member_NotFound_response_body
func ValidateDeleteCommitteeMemberNotFoundResponseBody(body *DeleteCommitteeMemberNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteCommitteeMemberServiceUnavailableResponseBody runs the
// validations defined on
// delete-committee-member_ServiceUnavailable_response_body
func ValidateDeleteCommitteeMemberServiceUnavailableResponseBody(body *DeleteCommitteeMemberServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCommitteeBaseWithReadonlyAttributesResponseBody runs the validations
// defined on committee-base-with-readonly-attributesResponseBody
func ValidateCommitteeBaseWithReadonlyAttributesResponseBody(body *CommitteeBaseWithReadonlyAttributesResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "Ambassador" || *body.Category == "Board" || *body.Category == "Code of Conduct" || *body.Category == "Committers" || *body.Category == "Expert Group" || *body.Category == "Finance Committee" || *body.Category == "Government Advisory Council" || *body.Category == "Legal Committee" || *body.Category == "Maintainers" || *body.Category == "Marketing Committee/Sub Committee" || *body.Category == "Marketing Mailing List" || *body.Category == "Marketing Oversight Committee/Marketing Advisory Committee" || *body.Category == "Other" || *body.Category == "Product Security" || *body.Category == "Special Interest Group" || *body.Category == "Technical Mailing List" || *body.Category == "Technical Oversight Committee/Technical Advisory Committee" || *body.Category == "Technical Steering Committee" || *body.Category == "Working Group") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []any{"Ambassador", "Board", "Code of Conduct", "Committers", "Expert Group", "Finance Committee", "Government Advisory Council", "Legal Committee", "Maintainers", "Marketing Committee/Sub Committee", "Marketing Mailing List", "Marketing Oversight Committee/Marketing Advisory Committee", "Other", "Product Security", "Special Interest Group", "Technical Mailing List", "Technical Oversight Committee/Technical Advisory Committee", "Technical Steering Committee", "Working Group"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.website", *body.Website, goa.FormatURI))
	}
	if body.Website != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.website", *body.Website, "^(https?://)?[^\\s/$.?#].[^\\s]*$"))
	}
	if body.DisplayName != nil {
		if utf8.RuneCountInString(*body.DisplayName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.display_name", *body.DisplayName, utf8.RuneCountInString(*body.DisplayName), 100, false))
		}
	}
	if body.ParentUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.parent_uid", *body.ParentUID, goa.FormatUUID))
	}
	if body.ProjectName != nil {
		if utf8.RuneCountInString(*body.ProjectName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.project_name", *body.ProjectName, utf8.RuneCountInString(*body.ProjectName), 100, false))
		}
	}
	if body.TotalMembers != nil {
		if *body.TotalMembers < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.total_members", *body.TotalMembers, 0, true))
		}
	}
	if body.TotalVotingRepos != nil {
		if *body.TotalVotingRepos < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.total_voting_repos", *body.TotalVotingRepos, 0, true))
		}
	}
	return
}

// ValidateCommitteeSettingsWithReadonlyAttributesResponseBody runs the
// validations defined on
// committee-settings-with-readonly-attributesResponseBody
func ValidateCommitteeSettingsWithReadonlyAttributesResponseBody(body *CommitteeSettingsWithReadonlyAttributesResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateCommitteeMemberFullWithReadonlyAttributesResponseBody runs the
// validations defined on
// committee-member-full-with-readonly-attributesResponseBody
func ValidateCommitteeMemberFullWithReadonlyAttributesResponseBody(body *CommitteeMemberFullWithReadonlyAttributesResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	if body.CommitteeName != nil {
		if utf8.RuneCountInString(*body.CommitteeName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.committee_name", *body.CommitteeName, utf8.RuneCountInString(*body.CommitteeName), 100, false))
		}
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
		}
	}
	if body.Role != nil {
		if body.Role.Name != nil {
			if !(*body.Role.Name == "Chair" || *body.Role.Name == "Counsel" || *body.Role.Name == "Developer Seat" || *body.Role.Name == "TAC/TOC Representative" || *body.Role.Name == "Director" || *body.Role.Name == "Lead" || *body.Role.Name == "None" || *body.Role.Name == "Secretary" || *body.Role.Name == "Treasurer" || *body.Role.Name == "Vice Chair" || *body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", *body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
		}
		if body.Role.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
		}
		if body.Role.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
		}
	}
	if body.AppointedBy != nil {
		if !(*body.AppointedBy == "Community" || *body.AppointedBy == "Membership Entitlement" || *body.AppointedBy == "Vote of End User Member Class" || *body.AppointedBy == "Vote of TSC Committee" || *body.AppointedBy == "Vote of TAC Committee" || *body.AppointedBy == "Vote of Academic Member Class" || *body.AppointedBy == "Vote of Lab Member Class" || *body.AppointedBy == "Vote of Marketing Committee" || *body.AppointedBy == "Vote of Governing Board" || *body.AppointedBy == "Vote of General Member Class" || *body.AppointedBy == "Vote of End User Committee" || *body.AppointedBy == "Vote of TOC Committee" || *body.AppointedBy == "Vote of Gold Member Class" || *body.AppointedBy == "Vote of Silver Member Class" || *body.AppointedBy == "Vote of Strategic Membership Class" || *body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", *body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Active" || *body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"Active", "Inactive"}))
		}
	}
	if body.Voting != nil {
		if body.Voting.Status != nil {
			if !(*body.Voting.Status == "Alternate Voting Rep" || *body.Voting.Status == "Observer" || *body.Voting.Status == "Voting Rep" || *body.Voting.Status == "Emeritus" || *body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", *body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
		}
		if body.Voting.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
		}
		if body.Voting.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
		}
	}
	if body.Agency != nil {
		if utf8.RuneCountInString(*body.Agency) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
		}
	}
	if body.Country != nil {
		if utf8.RuneCountInString(*body.Country) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
		}
	}
	if body.Organization != nil {
		if body.Organization.Name != nil {
			if utf8.RuneCountInString(*body.Organization.Name) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
			}
		}
		if body.Organization.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}
