// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-service HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	committeeservice "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee_service"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateCommitteeRequest instantiates a HTTP request object with method
// and path set to call the "committee-service" service "create-committee"
// endpoint
func (c *Client) BuildCreateCommitteeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCommitteeCommitteeServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "create-committee", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCommitteeRequest returns an encoder for requests sent to the
// committee-service create-committee server.
func EncodeCreateCommitteeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.CreateCommitteePayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "create-committee", "*committeeservice.CreateCommitteePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		body := NewCreateCommitteeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("committee-service", "create-committee", err)
		}
		return nil
	}
}

// DecodeCreateCommitteeResponse returns a decoder for responses returned by
// the committee-service create-committee endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeCreateCommitteeResponse may return the following errors:
//   - "BadRequest" (type *committeeservice.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *committeeservice.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeCreateCommitteeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCommitteeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee", err)
			}
			err = ValidateCreateCommitteeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee", err)
			}
			res := NewCreateCommitteeCommitteeFullWithReadonlyAttributesCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateCommitteeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee", err)
			}
			err = ValidateCreateCommitteeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee", err)
			}
			return nil, NewCreateCommitteeBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateCommitteeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee", err)
			}
			err = ValidateCreateCommitteeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee", err)
			}
			return nil, NewCreateCommitteeConflict(&body)
		case http.StatusInternalServerError:
			var (
				body CreateCommitteeInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee", err)
			}
			err = ValidateCreateCommitteeInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee", err)
			}
			return nil, NewCreateCommitteeInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body CreateCommitteeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee", err)
			}
			err = ValidateCreateCommitteeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee", err)
			}
			return nil, NewCreateCommitteeNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateCommitteeServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee", err)
			}
			err = ValidateCreateCommitteeServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee", err)
			}
			return nil, NewCreateCommitteeServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "create-committee", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCommitteeBaseRequest instantiates a HTTP request object with method
// and path set to call the "committee-service" service "get-committee-base"
// endpoint
func (c *Client) BuildGetCommitteeBaseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*committeeservice.GetCommitteeBasePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee-service", "get-committee-base", "*committeeservice.GetCommitteeBasePayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCommitteeBaseCommitteeServicePath(uid)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "get-committee-base", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCommitteeBaseRequest returns an encoder for requests sent to the
// committee-service get-committee-base server.
func EncodeGetCommitteeBaseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.GetCommitteeBasePayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "get-committee-base", "*committeeservice.GetCommitteeBasePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetCommitteeBaseResponse returns a decoder for responses returned by
// the committee-service get-committee-base endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetCommitteeBaseResponse may return the following errors:
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetCommitteeBaseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCommitteeBaseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-base", err)
			}
			err = ValidateGetCommitteeBaseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-base", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw != "" {
				etag = &etagRaw
			}
			res := NewGetCommitteeBaseResultOK(&body, etag)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetCommitteeBaseInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-base", err)
			}
			err = ValidateGetCommitteeBaseInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-base", err)
			}
			return nil, NewGetCommitteeBaseInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body GetCommitteeBaseNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-base", err)
			}
			err = ValidateGetCommitteeBaseNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-base", err)
			}
			return nil, NewGetCommitteeBaseNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetCommitteeBaseServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-base", err)
			}
			err = ValidateGetCommitteeBaseServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-base", err)
			}
			return nil, NewGetCommitteeBaseServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "get-committee-base", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCommitteeBaseRequest instantiates a HTTP request object with
// method and path set to call the "committee-service" service
// "update-committee-base" endpoint
func (c *Client) BuildUpdateCommitteeBaseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*committeeservice.UpdateCommitteeBasePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee-service", "update-committee-base", "*committeeservice.UpdateCommitteeBasePayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCommitteeBaseCommitteeServicePath(uid)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "update-committee-base", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCommitteeBaseRequest returns an encoder for requests sent to the
// committee-service update-committee-base server.
func EncodeUpdateCommitteeBaseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.UpdateCommitteeBasePayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "update-committee-base", "*committeeservice.UpdateCommitteeBasePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.IfMatch != nil {
			head := *p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		body := NewUpdateCommitteeBaseRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("committee-service", "update-committee-base", err)
		}
		return nil
	}
}

// DecodeUpdateCommitteeBaseResponse returns a decoder for responses returned
// by the committee-service update-committee-base endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeUpdateCommitteeBaseResponse may return the following errors:
//   - "BadRequest" (type *committeeservice.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *committeeservice.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeUpdateCommitteeBaseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateCommitteeBaseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-base", err)
			}
			err = ValidateUpdateCommitteeBaseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-base", err)
			}
			res := NewUpdateCommitteeBaseCommitteeBaseWithReadonlyAttributesOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateCommitteeBaseBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-base", err)
			}
			err = ValidateUpdateCommitteeBaseBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-base", err)
			}
			return nil, NewUpdateCommitteeBaseBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateCommitteeBaseConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-base", err)
			}
			err = ValidateUpdateCommitteeBaseConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-base", err)
			}
			return nil, NewUpdateCommitteeBaseConflict(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateCommitteeBaseInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-base", err)
			}
			err = ValidateUpdateCommitteeBaseInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-base", err)
			}
			return nil, NewUpdateCommitteeBaseInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body UpdateCommitteeBaseNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-base", err)
			}
			err = ValidateUpdateCommitteeBaseNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-base", err)
			}
			return nil, NewUpdateCommitteeBaseNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body UpdateCommitteeBaseServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-base", err)
			}
			err = ValidateUpdateCommitteeBaseServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-base", err)
			}
			return nil, NewUpdateCommitteeBaseServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "update-committee-base", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCommitteeRequest instantiates a HTTP request object with method
// and path set to call the "committee-service" service "delete-committee"
// endpoint
func (c *Client) BuildDeleteCommitteeRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*committeeservice.DeleteCommitteePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee-service", "delete-committee", "*committeeservice.DeleteCommitteePayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCommitteeCommitteeServicePath(uid)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "delete-committee", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteCommitteeRequest returns an encoder for requests sent to the
// committee-service delete-committee server.
func EncodeDeleteCommitteeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.DeleteCommitteePayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "delete-committee", "*committeeservice.DeleteCommitteePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.IfMatch != nil {
			head := *p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteCommitteeResponse returns a decoder for responses returned by
// the committee-service delete-committee endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeDeleteCommitteeResponse may return the following errors:
//   - "BadRequest" (type *committeeservice.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *committeeservice.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeDeleteCommitteeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteCommitteeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee", err)
			}
			err = ValidateDeleteCommitteeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee", err)
			}
			return nil, NewDeleteCommitteeBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteCommitteeConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee", err)
			}
			err = ValidateDeleteCommitteeConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee", err)
			}
			return nil, NewDeleteCommitteeConflict(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteCommitteeInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee", err)
			}
			err = ValidateDeleteCommitteeInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee", err)
			}
			return nil, NewDeleteCommitteeInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body DeleteCommitteeNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee", err)
			}
			err = ValidateDeleteCommitteeNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee", err)
			}
			return nil, NewDeleteCommitteeNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body DeleteCommitteeServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee", err)
			}
			err = ValidateDeleteCommitteeServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee", err)
			}
			return nil, NewDeleteCommitteeServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "delete-committee", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCommitteeSettingsRequest instantiates a HTTP request object with
// method and path set to call the "committee-service" service
// "get-committee-settings" endpoint
func (c *Client) BuildGetCommitteeSettingsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*committeeservice.GetCommitteeSettingsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee-service", "get-committee-settings", "*committeeservice.GetCommitteeSettingsPayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCommitteeSettingsCommitteeServicePath(uid)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "get-committee-settings", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCommitteeSettingsRequest returns an encoder for requests sent to
// the committee-service get-committee-settings server.
func EncodeGetCommitteeSettingsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.GetCommitteeSettingsPayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "get-committee-settings", "*committeeservice.GetCommitteeSettingsPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetCommitteeSettingsResponse returns a decoder for responses returned
// by the committee-service get-committee-settings endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeGetCommitteeSettingsResponse may return the following errors:
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetCommitteeSettingsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCommitteeSettingsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-settings", err)
			}
			err = ValidateGetCommitteeSettingsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-settings", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw != "" {
				etag = &etagRaw
			}
			res := NewGetCommitteeSettingsResultOK(&body, etag)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetCommitteeSettingsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-settings", err)
			}
			err = ValidateGetCommitteeSettingsInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-settings", err)
			}
			return nil, NewGetCommitteeSettingsInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body GetCommitteeSettingsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-settings", err)
			}
			err = ValidateGetCommitteeSettingsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-settings", err)
			}
			return nil, NewGetCommitteeSettingsNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetCommitteeSettingsServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-settings", err)
			}
			err = ValidateGetCommitteeSettingsServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-settings", err)
			}
			return nil, NewGetCommitteeSettingsServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "get-committee-settings", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCommitteeSettingsRequest instantiates a HTTP request object with
// method and path set to call the "committee-service" service
// "update-committee-settings" endpoint
func (c *Client) BuildUpdateCommitteeSettingsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*committeeservice.UpdateCommitteeSettingsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee-service", "update-committee-settings", "*committeeservice.UpdateCommitteeSettingsPayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCommitteeSettingsCommitteeServicePath(uid)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "update-committee-settings", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCommitteeSettingsRequest returns an encoder for requests sent to
// the committee-service update-committee-settings server.
func EncodeUpdateCommitteeSettingsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.UpdateCommitteeSettingsPayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "update-committee-settings", "*committeeservice.UpdateCommitteeSettingsPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.IfMatch != nil {
			head := *p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		body := NewUpdateCommitteeSettingsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("committee-service", "update-committee-settings", err)
		}
		return nil
	}
}

// DecodeUpdateCommitteeSettingsResponse returns a decoder for responses
// returned by the committee-service update-committee-settings endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeUpdateCommitteeSettingsResponse may return the following errors:
//   - "BadRequest" (type *committeeservice.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *committeeservice.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeUpdateCommitteeSettingsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateCommitteeSettingsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-settings", err)
			}
			err = ValidateUpdateCommitteeSettingsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-settings", err)
			}
			res := NewUpdateCommitteeSettingsCommitteeSettingsWithReadonlyAttributesOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateCommitteeSettingsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-settings", err)
			}
			err = ValidateUpdateCommitteeSettingsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-settings", err)
			}
			return nil, NewUpdateCommitteeSettingsBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateCommitteeSettingsConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-settings", err)
			}
			err = ValidateUpdateCommitteeSettingsConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-settings", err)
			}
			return nil, NewUpdateCommitteeSettingsConflict(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateCommitteeSettingsInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-settings", err)
			}
			err = ValidateUpdateCommitteeSettingsInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-settings", err)
			}
			return nil, NewUpdateCommitteeSettingsInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body UpdateCommitteeSettingsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-settings", err)
			}
			err = ValidateUpdateCommitteeSettingsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-settings", err)
			}
			return nil, NewUpdateCommitteeSettingsNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body UpdateCommitteeSettingsServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-settings", err)
			}
			err = ValidateUpdateCommitteeSettingsServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-settings", err)
			}
			return nil, NewUpdateCommitteeSettingsServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "update-committee-settings", resp.StatusCode, string(body))
		}
	}
}

// BuildReadyzRequest instantiates a HTTP request object with method and path
// set to call the "committee-service" service "readyz" endpoint
func (c *Client) BuildReadyzRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReadyzCommitteeServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "readyz", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeReadyzResponse returns a decoder for responses returned by the
// committee-service readyz endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeReadyzResponse may return the following errors:
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeReadyzResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "readyz", err)
			}
			return body, nil
		case http.StatusServiceUnavailable:
			var (
				body ReadyzServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "readyz", err)
			}
			err = ValidateReadyzServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "readyz", err)
			}
			return nil, NewReadyzServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "readyz", resp.StatusCode, string(body))
		}
	}
}

// BuildLivezRequest instantiates a HTTP request object with method and path
// set to call the "committee-service" service "livez" endpoint
func (c *Client) BuildLivezRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LivezCommitteeServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "livez", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLivezResponse returns a decoder for responses returned by the
// committee-service livez endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeLivezResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "livez", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "livez", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCommitteeMemberRequest instantiates a HTTP request object with
// method and path set to call the "committee-service" service
// "create-committee-member" endpoint
func (c *Client) BuildCreateCommitteeMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*committeeservice.CreateCommitteeMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee-service", "create-committee-member", "*committeeservice.CreateCommitteeMemberPayload", v)
		}
		uid = p.UID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCommitteeMemberCommitteeServicePath(uid)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "create-committee-member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCommitteeMemberRequest returns an encoder for requests sent to
// the committee-service create-committee-member server.
func EncodeCreateCommitteeMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.CreateCommitteeMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "create-committee-member", "*committeeservice.CreateCommitteeMemberPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		body := NewCreateCommitteeMemberRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("committee-service", "create-committee-member", err)
		}
		return nil
	}
}

// DecodeCreateCommitteeMemberResponse returns a decoder for responses returned
// by the committee-service create-committee-member endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeCreateCommitteeMemberResponse may return the following errors:
//   - "BadRequest" (type *committeeservice.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *committeeservice.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeCreateCommitteeMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCommitteeMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee-member", err)
			}
			err = ValidateCreateCommitteeMemberResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee-member", err)
			}
			res := NewCreateCommitteeMemberCommitteeMemberFullWithReadonlyAttributesCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateCommitteeMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee-member", err)
			}
			err = ValidateCreateCommitteeMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee-member", err)
			}
			return nil, NewCreateCommitteeMemberBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateCommitteeMemberConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee-member", err)
			}
			err = ValidateCreateCommitteeMemberConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee-member", err)
			}
			return nil, NewCreateCommitteeMemberConflict(&body)
		case http.StatusInternalServerError:
			var (
				body CreateCommitteeMemberInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee-member", err)
			}
			err = ValidateCreateCommitteeMemberInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee-member", err)
			}
			return nil, NewCreateCommitteeMemberInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body CreateCommitteeMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee-member", err)
			}
			err = ValidateCreateCommitteeMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee-member", err)
			}
			return nil, NewCreateCommitteeMemberNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateCommitteeMemberServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "create-committee-member", err)
			}
			err = ValidateCreateCommitteeMemberServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "create-committee-member", err)
			}
			return nil, NewCreateCommitteeMemberServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "create-committee-member", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCommitteeMemberRequest instantiates a HTTP request object with
// method and path set to call the "committee-service" service
// "get-committee-member" endpoint
func (c *Client) BuildGetCommitteeMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid       string
		memberUID string
	)
	{
		p, ok := v.(*committeeservice.GetCommitteeMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee-service", "get-committee-member", "*committeeservice.GetCommitteeMemberPayload", v)
		}
		uid = p.UID
		memberUID = p.MemberUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCommitteeMemberCommitteeServicePath(uid, memberUID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "get-committee-member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCommitteeMemberRequest returns an encoder for requests sent to the
// committee-service get-committee-member server.
func EncodeGetCommitteeMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.GetCommitteeMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "get-committee-member", "*committeeservice.GetCommitteeMemberPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetCommitteeMemberResponse returns a decoder for responses returned by
// the committee-service get-committee-member endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetCommitteeMemberResponse may return the following errors:
//   - "BadRequest" (type *committeeservice.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetCommitteeMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCommitteeMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-member", err)
			}
			err = ValidateGetCommitteeMemberResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-member", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw != "" {
				etag = &etagRaw
			}
			res := NewGetCommitteeMemberResultOK(&body, etag)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetCommitteeMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-member", err)
			}
			err = ValidateGetCommitteeMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-member", err)
			}
			return nil, NewGetCommitteeMemberBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetCommitteeMemberInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-member", err)
			}
			err = ValidateGetCommitteeMemberInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-member", err)
			}
			return nil, NewGetCommitteeMemberInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body GetCommitteeMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-member", err)
			}
			err = ValidateGetCommitteeMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-member", err)
			}
			return nil, NewGetCommitteeMemberNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetCommitteeMemberServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "get-committee-member", err)
			}
			err = ValidateGetCommitteeMemberServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "get-committee-member", err)
			}
			return nil, NewGetCommitteeMemberServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "get-committee-member", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCommitteeMemberRequest instantiates a HTTP request object with
// method and path set to call the "committee-service" service
// "update-committee-member" endpoint
func (c *Client) BuildUpdateCommitteeMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid       string
		memberUID string
	)
	{
		p, ok := v.(*committeeservice.UpdateCommitteeMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee-service", "update-committee-member", "*committeeservice.UpdateCommitteeMemberPayload", v)
		}
		uid = p.UID
		memberUID = p.MemberUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCommitteeMemberCommitteeServicePath(uid, memberUID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "update-committee-member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCommitteeMemberRequest returns an encoder for requests sent to
// the committee-service update-committee-member server.
func EncodeUpdateCommitteeMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.UpdateCommitteeMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "update-committee-member", "*committeeservice.UpdateCommitteeMemberPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.IfMatch != nil {
			head := *p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		body := NewUpdateCommitteeMemberRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("committee-service", "update-committee-member", err)
		}
		return nil
	}
}

// DecodeUpdateCommitteeMemberResponse returns a decoder for responses returned
// by the committee-service update-committee-member endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeUpdateCommitteeMemberResponse may return the following errors:
//   - "BadRequest" (type *committeeservice.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *committeeservice.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeUpdateCommitteeMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateCommitteeMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-member", err)
			}
			err = ValidateUpdateCommitteeMemberResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-member", err)
			}
			res := NewUpdateCommitteeMemberCommitteeMemberFullWithReadonlyAttributesOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateCommitteeMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-member", err)
			}
			err = ValidateUpdateCommitteeMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-member", err)
			}
			return nil, NewUpdateCommitteeMemberBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateCommitteeMemberConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-member", err)
			}
			err = ValidateUpdateCommitteeMemberConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-member", err)
			}
			return nil, NewUpdateCommitteeMemberConflict(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateCommitteeMemberInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-member", err)
			}
			err = ValidateUpdateCommitteeMemberInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-member", err)
			}
			return nil, NewUpdateCommitteeMemberInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body UpdateCommitteeMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-member", err)
			}
			err = ValidateUpdateCommitteeMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-member", err)
			}
			return nil, NewUpdateCommitteeMemberNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body UpdateCommitteeMemberServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "update-committee-member", err)
			}
			err = ValidateUpdateCommitteeMemberServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "update-committee-member", err)
			}
			return nil, NewUpdateCommitteeMemberServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "update-committee-member", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCommitteeMemberRequest instantiates a HTTP request object with
// method and path set to call the "committee-service" service
// "delete-committee-member" endpoint
func (c *Client) BuildDeleteCommitteeMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid       string
		memberUID string
	)
	{
		p, ok := v.(*committeeservice.DeleteCommitteeMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("committee-service", "delete-committee-member", "*committeeservice.DeleteCommitteeMemberPayload", v)
		}
		uid = p.UID
		memberUID = p.MemberUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCommitteeMemberCommitteeServicePath(uid, memberUID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("committee-service", "delete-committee-member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteCommitteeMemberRequest returns an encoder for requests sent to
// the committee-service delete-committee-member server.
func EncodeDeleteCommitteeMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*committeeservice.DeleteCommitteeMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("committee-service", "delete-committee-member", "*committeeservice.DeleteCommitteeMemberPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.IfMatch != nil {
			head := *p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteCommitteeMemberResponse returns a decoder for responses returned
// by the committee-service delete-committee-member endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeDeleteCommitteeMemberResponse may return the following errors:
//   - "BadRequest" (type *committeeservice.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *committeeservice.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *committeeservice.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *committeeservice.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *committeeservice.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeDeleteCommitteeMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteCommitteeMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee-member", err)
			}
			err = ValidateDeleteCommitteeMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee-member", err)
			}
			return nil, NewDeleteCommitteeMemberBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteCommitteeMemberConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee-member", err)
			}
			err = ValidateDeleteCommitteeMemberConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee-member", err)
			}
			return nil, NewDeleteCommitteeMemberConflict(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteCommitteeMemberInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee-member", err)
			}
			err = ValidateDeleteCommitteeMemberInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee-member", err)
			}
			return nil, NewDeleteCommitteeMemberInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body DeleteCommitteeMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee-member", err)
			}
			err = ValidateDeleteCommitteeMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee-member", err)
			}
			return nil, NewDeleteCommitteeMemberNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body DeleteCommitteeMemberServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("committee-service", "delete-committee-member", err)
			}
			err = ValidateDeleteCommitteeMemberServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("committee-service", "delete-committee-member", err)
			}
			return nil, NewDeleteCommitteeMemberServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("committee-service", "delete-committee-member", resp.StatusCode, string(body))
		}
	}
}
