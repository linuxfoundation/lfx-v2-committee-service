// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-members-service HTTP server
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package server

import (
	"context"
	"net/http"

	committeemembersservice "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee_members_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the committee-members-service service endpoint HTTP handlers.
type Server struct {
	Mounts                []*MountPoint
	CreateCommitteeMember http.Handler
	GetCommitteeMember    http.Handler
	UpdateCommitteeMember http.Handler
	DeleteCommitteeMember http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the committee-members-service service
// endpoints using the provided encoder and decoder. The handlers are mounted
// on the given mux using the HTTP verb and path defined in the design.
// errhandler is called whenever a response fails to be encoded. formatter is
// used to format errors returned by the service methods prior to encoding.
// Both errhandler and formatter are optional and can be nil.
func New(
	e *committeemembersservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateCommitteeMember", "POST", "/committees/{uid}/members"},
			{"GetCommitteeMember", "GET", "/committees/{uid}/members/{member_uid}"},
			{"UpdateCommitteeMember", "PUT", "/committees/{uid}/members/{member_uid}"},
			{"DeleteCommitteeMember", "DELETE", "/committees/{uid}/members/{member_uid}"},
		},
		CreateCommitteeMember: NewCreateCommitteeMemberHandler(e.CreateCommitteeMember, mux, decoder, encoder, errhandler, formatter),
		GetCommitteeMember:    NewGetCommitteeMemberHandler(e.GetCommitteeMember, mux, decoder, encoder, errhandler, formatter),
		UpdateCommitteeMember: NewUpdateCommitteeMemberHandler(e.UpdateCommitteeMember, mux, decoder, encoder, errhandler, formatter),
		DeleteCommitteeMember: NewDeleteCommitteeMemberHandler(e.DeleteCommitteeMember, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "committee-members-service" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateCommitteeMember = m(s.CreateCommitteeMember)
	s.GetCommitteeMember = m(s.GetCommitteeMember)
	s.UpdateCommitteeMember = m(s.UpdateCommitteeMember)
	s.DeleteCommitteeMember = m(s.DeleteCommitteeMember)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return committeemembersservice.MethodNames[:] }

// Mount configures the mux to serve the committee-members-service endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateCommitteeMemberHandler(mux, h.CreateCommitteeMember)
	MountGetCommitteeMemberHandler(mux, h.GetCommitteeMember)
	MountUpdateCommitteeMemberHandler(mux, h.UpdateCommitteeMember)
	MountDeleteCommitteeMemberHandler(mux, h.DeleteCommitteeMember)
}

// Mount configures the mux to serve the committee-members-service endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateCommitteeMemberHandler configures the mux to serve the
// "committee-members-service" service "create-committee-member" endpoint.
func MountCreateCommitteeMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/committees/{uid}/members", f)
}

// NewCreateCommitteeMemberHandler creates a HTTP handler which loads the HTTP
// request and calls the "committee-members-service" service
// "create-committee-member" endpoint.
func NewCreateCommitteeMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCommitteeMemberRequest(mux, decoder)
		encodeResponse = EncodeCreateCommitteeMemberResponse(encoder)
		encodeError    = EncodeCreateCommitteeMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-committee-member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-members-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountGetCommitteeMemberHandler configures the mux to serve the
// "committee-members-service" service "get-committee-member" endpoint.
func MountGetCommitteeMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/committees/{uid}/members/{member_uid}", f)
}

// NewGetCommitteeMemberHandler creates a HTTP handler which loads the HTTP
// request and calls the "committee-members-service" service
// "get-committee-member" endpoint.
func NewGetCommitteeMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCommitteeMemberRequest(mux, decoder)
		encodeResponse = EncodeGetCommitteeMemberResponse(encoder)
		encodeError    = EncodeGetCommitteeMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-committee-member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-members-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUpdateCommitteeMemberHandler configures the mux to serve the
// "committee-members-service" service "update-committee-member" endpoint.
func MountUpdateCommitteeMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/committees/{uid}/members/{member_uid}", f)
}

// NewUpdateCommitteeMemberHandler creates a HTTP handler which loads the HTTP
// request and calls the "committee-members-service" service
// "update-committee-member" endpoint.
func NewUpdateCommitteeMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCommitteeMemberRequest(mux, decoder)
		encodeResponse = EncodeUpdateCommitteeMemberResponse(encoder)
		encodeError    = EncodeUpdateCommitteeMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-committee-member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-members-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountDeleteCommitteeMemberHandler configures the mux to serve the
// "committee-members-service" service "delete-committee-member" endpoint.
func MountDeleteCommitteeMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/committees/{uid}/members/{member_uid}", f)
}

// NewDeleteCommitteeMemberHandler creates a HTTP handler which loads the HTTP
// request and calls the "committee-members-service" service
// "delete-committee-member" endpoint.
func NewDeleteCommitteeMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCommitteeMemberRequest(mux, decoder)
		encodeResponse = EncodeDeleteCommitteeMemberResponse(encoder)
		encodeError    = EncodeDeleteCommitteeMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-committee-member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "committee-members-service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}
