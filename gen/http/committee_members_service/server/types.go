// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-members-service HTTP server types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package server

import (
	"unicode/utf8"

	committeemembersservice "github.com/linuxfoundation/lfx-v2-committee-service/gen/committee_members_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateCommitteeMemberRequestBody is the type of the
// "committee-members-service" service "create-committee-member" endpoint HTTP
// request body.
type CreateCommitteeMemberRequestBody struct {
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name *string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy *string `form:"appointed_by,omitempty" json:"appointed_by,omitempty" xml:"appointed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status *string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
}

// UpdateCommitteeMemberRequestBody is the type of the
// "committee-members-service" service "update-committee-member" endpoint HTTP
// request body.
type UpdateCommitteeMemberRequestBody struct {
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name *string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy *string `form:"appointed_by,omitempty" json:"appointed_by,omitempty" xml:"appointed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status *string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
}

// CreateCommitteeMemberResponseBody is the type of the
// "committee-members-service" service "create-committee-member" endpoint HTTP
// response body.
type CreateCommitteeMemberResponseBody struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy string `form:"appointed_by" json:"appointed_by" xml:"appointed_by"`
	// Member status
	Status string `form:"status" json:"status" xml:"status"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetCommitteeMemberResponseBody is the type of the
// "committee-members-service" service "get-committee-member" endpoint HTTP
// response body.
type GetCommitteeMemberResponseBody CommitteeMemberFullWithReadonlyAttributesResponseBody

// UpdateCommitteeMemberResponseBody is the type of the
// "committee-members-service" service "update-committee-member" endpoint HTTP
// response body.
type UpdateCommitteeMemberResponseBody struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy string `form:"appointed_by" json:"appointed_by" xml:"appointed_by"`
	// Member status
	Status string `form:"status" json:"status" xml:"status"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateCommitteeMemberBadRequestResponseBody is the type of the
// "committee-members-service" service "create-committee-member" endpoint HTTP
// response body for the "BadRequest" error.
type CreateCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeMemberConflictResponseBody is the type of the
// "committee-members-service" service "create-committee-member" endpoint HTTP
// response body for the "Conflict" error.
type CreateCommitteeMemberConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-members-service" service "create-committee-member" endpoint HTTP
// response body for the "InternalServerError" error.
type CreateCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeMemberNotFoundResponseBody is the type of the
// "committee-members-service" service "create-committee-member" endpoint HTTP
// response body for the "NotFound" error.
type CreateCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-members-service" service "create-committee-member" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type CreateCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeMemberBadRequestResponseBody is the type of the
// "committee-members-service" service "get-committee-member" endpoint HTTP
// response body for the "BadRequest" error.
type GetCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-members-service" service "get-committee-member" endpoint HTTP
// response body for the "InternalServerError" error.
type GetCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeMemberNotFoundResponseBody is the type of the
// "committee-members-service" service "get-committee-member" endpoint HTTP
// response body for the "NotFound" error.
type GetCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-members-service" service "get-committee-member" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type GetCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberBadRequestResponseBody is the type of the
// "committee-members-service" service "update-committee-member" endpoint HTTP
// response body for the "BadRequest" error.
type UpdateCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberConflictResponseBody is the type of the
// "committee-members-service" service "update-committee-member" endpoint HTTP
// response body for the "Conflict" error.
type UpdateCommitteeMemberConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-members-service" service "update-committee-member" endpoint HTTP
// response body for the "InternalServerError" error.
type UpdateCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberNotFoundResponseBody is the type of the
// "committee-members-service" service "update-committee-member" endpoint HTTP
// response body for the "NotFound" error.
type UpdateCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-members-service" service "update-committee-member" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type UpdateCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberBadRequestResponseBody is the type of the
// "committee-members-service" service "delete-committee-member" endpoint HTTP
// response body for the "BadRequest" error.
type DeleteCommitteeMemberBadRequestResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberConflictResponseBody is the type of the
// "committee-members-service" service "delete-committee-member" endpoint HTTP
// response body for the "Conflict" error.
type DeleteCommitteeMemberConflictResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberInternalServerErrorResponseBody is the type of the
// "committee-members-service" service "delete-committee-member" endpoint HTTP
// response body for the "InternalServerError" error.
type DeleteCommitteeMemberInternalServerErrorResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberNotFoundResponseBody is the type of the
// "committee-members-service" service "delete-committee-member" endpoint HTTP
// response body for the "NotFound" error.
type DeleteCommitteeMemberNotFoundResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteCommitteeMemberServiceUnavailableResponseBody is the type of the
// "committee-members-service" service "delete-committee-member" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type DeleteCommitteeMemberServiceUnavailableResponseBody struct {
	// Error message
	Message string `form:"message" json:"message" xml:"message"`
}

// CommitteeMemberFullWithReadonlyAttributesResponseBody is used to define
// fields on response body types.
type CommitteeMemberFullWithReadonlyAttributesResponseBody struct {
	// Committee member UID -- v2 uid, not related to v1 id directly
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Primary email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Job title at organization
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Committee role information
	Role *struct {
		// Committee role name
		Name string `form:"name" json:"name" xml:"name"`
		// Role start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Role end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// How the member was appointed
	AppointedBy string `form:"appointed_by" json:"appointed_by" xml:"appointed_by"`
	// Member status
	Status string `form:"status" json:"status" xml:"status"`
	// Voting information for the committee member
	Voting *struct {
		// Voting status
		Status string `form:"status" json:"status" xml:"status"`
		// Voting start date
		StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
		// Voting end date
		EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
	} `form:"voting,omitempty" json:"voting,omitempty" xml:"voting,omitempty"`
	// Government agency (for GAC members)
	Agency *string `form:"agency,omitempty" json:"agency,omitempty" xml:"agency,omitempty"`
	// Country (for GAC members)
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Organization information for the committee member
	Organization *struct {
		// Organization name
		Name *string `form:"name" json:"name" xml:"name"`
		// Organization website URL
		Website *string `form:"website" json:"website" xml:"website"`
	} `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// The timestamp when the resource was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the resource was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateCommitteeMemberResponseBody builds the HTTP response body from the
// result of the "create-committee-member" endpoint of the
// "committee-members-service" service.
func NewCreateCommitteeMemberResponseBody(res *committeemembersservice.CommitteeMemberFullWithReadonlyAttributes) *CreateCommitteeMemberResponseBody {
	body := &CreateCommitteeMemberResponseBody{
		UID:         res.UID,
		Username:    res.Username,
		Email:       res.Email,
		FirstName:   res.FirstName,
		LastName:    res.LastName,
		JobTitle:    res.JobTitle,
		AppointedBy: res.AppointedBy,
		Status:      res.Status,
		Agency:      res.Agency,
		Country:     res.Country,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	if res.Role != nil {
		body.Role = &struct {
			// Committee role name
			Name string `form:"name" json:"name" xml:"name"`
			// Role start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Role end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Name:      res.Role.Name,
			StartDate: res.Role.StartDate,
			EndDate:   res.Role.EndDate,
		}
		{
			var zero string
			if body.Role.Name == zero {
				body.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if body.AppointedBy == zero {
			body.AppointedBy = "None"
		}
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "Active"
		}
	}
	if res.Voting != nil {
		body.Voting = &struct {
			// Voting status
			Status string `form:"status" json:"status" xml:"status"`
			// Voting start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Voting end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Status:    res.Voting.Status,
			StartDate: res.Voting.StartDate,
			EndDate:   res.Voting.EndDate,
		}
		{
			var zero string
			if body.Voting.Status == zero {
				body.Voting.Status = "None"
			}
		}
	}
	if res.Organization != nil {
		body.Organization = &struct {
			// Organization name
			Name *string `form:"name" json:"name" xml:"name"`
			// Organization website URL
			Website *string `form:"website" json:"website" xml:"website"`
		}{
			Name:    res.Organization.Name,
			Website: res.Organization.Website,
		}
	}
	return body
}

// NewGetCommitteeMemberResponseBody builds the HTTP response body from the
// result of the "get-committee-member" endpoint of the
// "committee-members-service" service.
func NewGetCommitteeMemberResponseBody(res *committeemembersservice.GetCommitteeMemberResult) *GetCommitteeMemberResponseBody {
	body := &GetCommitteeMemberResponseBody{
		UID:         res.Member.UID,
		Username:    res.Member.Username,
		Email:       res.Member.Email,
		FirstName:   res.Member.FirstName,
		LastName:    res.Member.LastName,
		JobTitle:    res.Member.JobTitle,
		AppointedBy: res.Member.AppointedBy,
		Status:      res.Member.Status,
		Agency:      res.Member.Agency,
		Country:     res.Member.Country,
		CreatedAt:   res.Member.CreatedAt,
		UpdatedAt:   res.Member.UpdatedAt,
	}
	if res.Member.Role != nil {
		body.Role = &struct {
			// Committee role name
			Name string `form:"name" json:"name" xml:"name"`
			// Role start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Role end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Name:      res.Member.Role.Name,
			StartDate: res.Member.Role.StartDate,
			EndDate:   res.Member.Role.EndDate,
		}
		{
			var zero string
			if body.Role.Name == zero {
				body.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if body.AppointedBy == zero {
			body.AppointedBy = "None"
		}
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "Active"
		}
	}
	if res.Member.Voting != nil {
		body.Voting = &struct {
			// Voting status
			Status string `form:"status" json:"status" xml:"status"`
			// Voting start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Voting end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Status:    res.Member.Voting.Status,
			StartDate: res.Member.Voting.StartDate,
			EndDate:   res.Member.Voting.EndDate,
		}
		{
			var zero string
			if body.Voting.Status == zero {
				body.Voting.Status = "None"
			}
		}
	}
	if res.Member.Organization != nil {
		body.Organization = &struct {
			// Organization name
			Name *string `form:"name" json:"name" xml:"name"`
			// Organization website URL
			Website *string `form:"website" json:"website" xml:"website"`
		}{
			Name:    res.Member.Organization.Name,
			Website: res.Member.Organization.Website,
		}
	}
	return body
}

// NewUpdateCommitteeMemberResponseBody builds the HTTP response body from the
// result of the "update-committee-member" endpoint of the
// "committee-members-service" service.
func NewUpdateCommitteeMemberResponseBody(res *committeemembersservice.CommitteeMemberFullWithReadonlyAttributes) *UpdateCommitteeMemberResponseBody {
	body := &UpdateCommitteeMemberResponseBody{
		UID:         res.UID,
		Username:    res.Username,
		Email:       res.Email,
		FirstName:   res.FirstName,
		LastName:    res.LastName,
		JobTitle:    res.JobTitle,
		AppointedBy: res.AppointedBy,
		Status:      res.Status,
		Agency:      res.Agency,
		Country:     res.Country,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	if res.Role != nil {
		body.Role = &struct {
			// Committee role name
			Name string `form:"name" json:"name" xml:"name"`
			// Role start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Role end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Name:      res.Role.Name,
			StartDate: res.Role.StartDate,
			EndDate:   res.Role.EndDate,
		}
		{
			var zero string
			if body.Role.Name == zero {
				body.Role.Name = "None"
			}
		}
	}
	{
		var zero string
		if body.AppointedBy == zero {
			body.AppointedBy = "None"
		}
	}
	{
		var zero string
		if body.Status == zero {
			body.Status = "Active"
		}
	}
	if res.Voting != nil {
		body.Voting = &struct {
			// Voting status
			Status string `form:"status" json:"status" xml:"status"`
			// Voting start date
			StartDate *string `form:"start_date" json:"start_date" xml:"start_date"`
			// Voting end date
			EndDate *string `form:"end_date" json:"end_date" xml:"end_date"`
		}{
			Status:    res.Voting.Status,
			StartDate: res.Voting.StartDate,
			EndDate:   res.Voting.EndDate,
		}
		{
			var zero string
			if body.Voting.Status == zero {
				body.Voting.Status = "None"
			}
		}
	}
	if res.Organization != nil {
		body.Organization = &struct {
			// Organization name
			Name *string `form:"name" json:"name" xml:"name"`
			// Organization website URL
			Website *string `form:"website" json:"website" xml:"website"`
		}{
			Name:    res.Organization.Name,
			Website: res.Organization.Website,
		}
	}
	return body
}

// NewCreateCommitteeMemberBadRequestResponseBody builds the HTTP response body
// from the result of the "create-committee-member" endpoint of the
// "committee-members-service" service.
func NewCreateCommitteeMemberBadRequestResponseBody(res *committeemembersservice.BadRequestError) *CreateCommitteeMemberBadRequestResponseBody {
	body := &CreateCommitteeMemberBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberConflictResponseBody builds the HTTP response body
// from the result of the "create-committee-member" endpoint of the
// "committee-members-service" service.
func NewCreateCommitteeMemberConflictResponseBody(res *committeemembersservice.ConflictError) *CreateCommitteeMemberConflictResponseBody {
	body := &CreateCommitteeMemberConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "create-committee-member" endpoint of
// the "committee-members-service" service.
func NewCreateCommitteeMemberInternalServerErrorResponseBody(res *committeemembersservice.InternalServerError) *CreateCommitteeMemberInternalServerErrorResponseBody {
	body := &CreateCommitteeMemberInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberNotFoundResponseBody builds the HTTP response body
// from the result of the "create-committee-member" endpoint of the
// "committee-members-service" service.
func NewCreateCommitteeMemberNotFoundResponseBody(res *committeemembersservice.NotFoundError) *CreateCommitteeMemberNotFoundResponseBody {
	body := &CreateCommitteeMemberNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "create-committee-member" endpoint of
// the "committee-members-service" service.
func NewCreateCommitteeMemberServiceUnavailableResponseBody(res *committeemembersservice.ServiceUnavailableError) *CreateCommitteeMemberServiceUnavailableResponseBody {
	body := &CreateCommitteeMemberServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeMemberBadRequestResponseBody builds the HTTP response body
// from the result of the "get-committee-member" endpoint of the
// "committee-members-service" service.
func NewGetCommitteeMemberBadRequestResponseBody(res *committeemembersservice.BadRequestError) *GetCommitteeMemberBadRequestResponseBody {
	body := &GetCommitteeMemberBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeMemberInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "get-committee-member" endpoint of the
// "committee-members-service" service.
func NewGetCommitteeMemberInternalServerErrorResponseBody(res *committeemembersservice.InternalServerError) *GetCommitteeMemberInternalServerErrorResponseBody {
	body := &GetCommitteeMemberInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeMemberNotFoundResponseBody builds the HTTP response body from
// the result of the "get-committee-member" endpoint of the
// "committee-members-service" service.
func NewGetCommitteeMemberNotFoundResponseBody(res *committeemembersservice.NotFoundError) *GetCommitteeMemberNotFoundResponseBody {
	body := &GetCommitteeMemberNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewGetCommitteeMemberServiceUnavailableResponseBody builds the HTTP response
// body from the result of the "get-committee-member" endpoint of the
// "committee-members-service" service.
func NewGetCommitteeMemberServiceUnavailableResponseBody(res *committeemembersservice.ServiceUnavailableError) *GetCommitteeMemberServiceUnavailableResponseBody {
	body := &GetCommitteeMemberServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberBadRequestResponseBody builds the HTTP response body
// from the result of the "update-committee-member" endpoint of the
// "committee-members-service" service.
func NewUpdateCommitteeMemberBadRequestResponseBody(res *committeemembersservice.BadRequestError) *UpdateCommitteeMemberBadRequestResponseBody {
	body := &UpdateCommitteeMemberBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberConflictResponseBody builds the HTTP response body
// from the result of the "update-committee-member" endpoint of the
// "committee-members-service" service.
func NewUpdateCommitteeMemberConflictResponseBody(res *committeemembersservice.ConflictError) *UpdateCommitteeMemberConflictResponseBody {
	body := &UpdateCommitteeMemberConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "update-committee-member" endpoint of
// the "committee-members-service" service.
func NewUpdateCommitteeMemberInternalServerErrorResponseBody(res *committeemembersservice.InternalServerError) *UpdateCommitteeMemberInternalServerErrorResponseBody {
	body := &UpdateCommitteeMemberInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberNotFoundResponseBody builds the HTTP response body
// from the result of the "update-committee-member" endpoint of the
// "committee-members-service" service.
func NewUpdateCommitteeMemberNotFoundResponseBody(res *committeemembersservice.NotFoundError) *UpdateCommitteeMemberNotFoundResponseBody {
	body := &UpdateCommitteeMemberNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewUpdateCommitteeMemberServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "update-committee-member" endpoint of
// the "committee-members-service" service.
func NewUpdateCommitteeMemberServiceUnavailableResponseBody(res *committeemembersservice.ServiceUnavailableError) *UpdateCommitteeMemberServiceUnavailableResponseBody {
	body := &UpdateCommitteeMemberServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberBadRequestResponseBody builds the HTTP response body
// from the result of the "delete-committee-member" endpoint of the
// "committee-members-service" service.
func NewDeleteCommitteeMemberBadRequestResponseBody(res *committeemembersservice.BadRequestError) *DeleteCommitteeMemberBadRequestResponseBody {
	body := &DeleteCommitteeMemberBadRequestResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberConflictResponseBody builds the HTTP response body
// from the result of the "delete-committee-member" endpoint of the
// "committee-members-service" service.
func NewDeleteCommitteeMemberConflictResponseBody(res *committeemembersservice.ConflictError) *DeleteCommitteeMemberConflictResponseBody {
	body := &DeleteCommitteeMemberConflictResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "delete-committee-member" endpoint of
// the "committee-members-service" service.
func NewDeleteCommitteeMemberInternalServerErrorResponseBody(res *committeemembersservice.InternalServerError) *DeleteCommitteeMemberInternalServerErrorResponseBody {
	body := &DeleteCommitteeMemberInternalServerErrorResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberNotFoundResponseBody builds the HTTP response body
// from the result of the "delete-committee-member" endpoint of the
// "committee-members-service" service.
func NewDeleteCommitteeMemberNotFoundResponseBody(res *committeemembersservice.NotFoundError) *DeleteCommitteeMemberNotFoundResponseBody {
	body := &DeleteCommitteeMemberNotFoundResponseBody{
		Message: res.Message,
	}
	return body
}

// NewDeleteCommitteeMemberServiceUnavailableResponseBody builds the HTTP
// response body from the result of the "delete-committee-member" endpoint of
// the "committee-members-service" service.
func NewDeleteCommitteeMemberServiceUnavailableResponseBody(res *committeemembersservice.ServiceUnavailableError) *DeleteCommitteeMemberServiceUnavailableResponseBody {
	body := &DeleteCommitteeMemberServiceUnavailableResponseBody{
		Message: res.Message,
	}
	return body
}

// NewCreateCommitteeMemberPayload builds a committee-members-service service
// create-committee-member endpoint payload.
func NewCreateCommitteeMemberPayload(body *CreateCommitteeMemberRequestBody, uid string, version string, bearerToken *string) *committeemembersservice.CreateCommitteeMemberPayload {
	v := &committeemembersservice.CreateCommitteeMemberPayload{
		Username:  body.Username,
		Email:     *body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		JobTitle:  body.JobTitle,
		Agency:    body.Agency,
		Country:   body.Country,
	}
	if body.AppointedBy != nil {
		v.AppointedBy = *body.AppointedBy
	}
	if body.Status != nil {
		v.Status = *body.Status
	}
	if body.Role != nil {
		v.Role = &struct {
			// Committee role name
			Name string
			// Role start date
			StartDate *string
			// Role end date
			EndDate *string
		}{
			StartDate: body.Role.StartDate,
			EndDate:   body.Role.EndDate,
		}
		if body.Role.Name != nil {
			v.Role.Name = *body.Role.Name
		}
		if body.Role.Name == nil {
			v.Role.Name = "None"
		}
	}
	if body.AppointedBy == nil {
		v.AppointedBy = "None"
	}
	if body.Status == nil {
		v.Status = "Active"
	}
	if body.Voting != nil {
		v.Voting = &struct {
			// Voting status
			Status string
			// Voting start date
			StartDate *string
			// Voting end date
			EndDate *string
		}{
			StartDate: body.Voting.StartDate,
			EndDate:   body.Voting.EndDate,
		}
		if body.Voting.Status != nil {
			v.Voting.Status = *body.Voting.Status
		}
		if body.Voting.Status == nil {
			v.Voting.Status = "None"
		}
	}
	if body.Organization != nil {
		v.Organization = &struct {
			// Organization name
			Name *string
			// Organization website URL
			Website *string
		}{
			Name:    body.Organization.Name,
			Website: body.Organization.Website,
		}
	}
	v.UID = uid
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewGetCommitteeMemberPayload builds a committee-members-service service
// get-committee-member endpoint payload.
func NewGetCommitteeMemberPayload(uid string, memberUID string, version string, bearerToken *string) *committeemembersservice.GetCommitteeMemberPayload {
	v := &committeemembersservice.GetCommitteeMemberPayload{}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken

	return v
}

// NewUpdateCommitteeMemberPayload builds a committee-members-service service
// update-committee-member endpoint payload.
func NewUpdateCommitteeMemberPayload(body *UpdateCommitteeMemberRequestBody, uid string, memberUID string, version string, bearerToken *string, ifMatch string) *committeemembersservice.UpdateCommitteeMemberPayload {
	v := &committeemembersservice.UpdateCommitteeMemberPayload{
		Username:  body.Username,
		Email:     *body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		JobTitle:  body.JobTitle,
		Agency:    body.Agency,
		Country:   body.Country,
	}
	if body.AppointedBy != nil {
		v.AppointedBy = *body.AppointedBy
	}
	if body.Status != nil {
		v.Status = *body.Status
	}
	if body.Role != nil {
		v.Role = &struct {
			// Committee role name
			Name string
			// Role start date
			StartDate *string
			// Role end date
			EndDate *string
		}{
			StartDate: body.Role.StartDate,
			EndDate:   body.Role.EndDate,
		}
		if body.Role.Name != nil {
			v.Role.Name = *body.Role.Name
		}
		if body.Role.Name == nil {
			v.Role.Name = "None"
		}
	}
	if body.AppointedBy == nil {
		v.AppointedBy = "None"
	}
	if body.Status == nil {
		v.Status = "Active"
	}
	if body.Voting != nil {
		v.Voting = &struct {
			// Voting status
			Status string
			// Voting start date
			StartDate *string
			// Voting end date
			EndDate *string
		}{
			StartDate: body.Voting.StartDate,
			EndDate:   body.Voting.EndDate,
		}
		if body.Voting.Status != nil {
			v.Voting.Status = *body.Voting.Status
		}
		if body.Voting.Status == nil {
			v.Voting.Status = "None"
		}
	}
	if body.Organization != nil {
		v.Organization = &struct {
			// Organization name
			Name *string
			// Organization website URL
			Website *string
		}{
			Name:    body.Organization.Name,
			Website: body.Organization.Website,
		}
	}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v
}

// NewDeleteCommitteeMemberPayload builds a committee-members-service service
// delete-committee-member endpoint payload.
func NewDeleteCommitteeMemberPayload(uid string, memberUID string, version string, bearerToken *string, ifMatch string) *committeemembersservice.DeleteCommitteeMemberPayload {
	v := &committeemembersservice.DeleteCommitteeMemberPayload{}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v
}

// ValidateCreateCommitteeMemberRequestBody runs the validations defined on
// Create-Committee-MemberRequestBody
func ValidateCreateCommitteeMemberRequestBody(body *CreateCommitteeMemberRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
		}
	}
	if body.Role != nil {
		if body.Role.Name != nil {
			if !(*body.Role.Name == "Chair" || *body.Role.Name == "Counsel" || *body.Role.Name == "Developer Seat" || *body.Role.Name == "TAC/TOC Representative" || *body.Role.Name == "Director" || *body.Role.Name == "Lead" || *body.Role.Name == "None" || *body.Role.Name == "Secretary" || *body.Role.Name == "Treasurer" || *body.Role.Name == "Vice Chair" || *body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", *body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
		}
		if body.Role.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
		}
		if body.Role.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
		}
	}
	if body.AppointedBy != nil {
		if !(*body.AppointedBy == "Community" || *body.AppointedBy == "Membership Entitlement" || *body.AppointedBy == "Vote of End User Member Class" || *body.AppointedBy == "Vote of TSC Committee" || *body.AppointedBy == "Vote of TAC Committee" || *body.AppointedBy == "Vote of Academic Member Class" || *body.AppointedBy == "Vote of Lab Member Class" || *body.AppointedBy == "Vote of Marketing Committee" || *body.AppointedBy == "Vote of Governing Board" || *body.AppointedBy == "Vote of General Member Class" || *body.AppointedBy == "Vote of End User Committee" || *body.AppointedBy == "Vote of TOC Committee" || *body.AppointedBy == "Vote of Gold Member Class" || *body.AppointedBy == "Vote of Silver Member Class" || *body.AppointedBy == "Vote of Strategic Membership Class" || *body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", *body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Active" || *body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"Active", "Inactive"}))
		}
	}
	if body.Voting != nil {
		if body.Voting.Status != nil {
			if !(*body.Voting.Status == "Alternate Voting Rep" || *body.Voting.Status == "Observer" || *body.Voting.Status == "Voting Rep" || *body.Voting.Status == "Emeritus" || *body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", *body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
		}
		if body.Voting.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
		}
		if body.Voting.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
		}
	}
	if body.Agency != nil {
		if utf8.RuneCountInString(*body.Agency) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
		}
	}
	if body.Country != nil {
		if utf8.RuneCountInString(*body.Country) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
		}
	}
	if body.Organization != nil {
		if body.Organization.Name != nil {
			if utf8.RuneCountInString(*body.Organization.Name) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
			}
		}
		if body.Organization.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
		}
	}
	return
}

// ValidateUpdateCommitteeMemberRequestBody runs the validations defined on
// Update-Committee-MemberRequestBody
func ValidateUpdateCommitteeMemberRequestBody(body *UpdateCommitteeMemberRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 100, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 200, false))
		}
	}
	if body.Role != nil {
		if body.Role.Name != nil {
			if !(*body.Role.Name == "Chair" || *body.Role.Name == "Counsel" || *body.Role.Name == "Developer Seat" || *body.Role.Name == "TAC/TOC Representative" || *body.Role.Name == "Director" || *body.Role.Name == "Lead" || *body.Role.Name == "None" || *body.Role.Name == "Secretary" || *body.Role.Name == "Treasurer" || *body.Role.Name == "Vice Chair" || *body.Role.Name == "LF Staff") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role.name", *body.Role.Name, []any{"Chair", "Counsel", "Developer Seat", "TAC/TOC Representative", "Director", "Lead", "None", "Secretary", "Treasurer", "Vice Chair", "LF Staff"}))
			}
		}
		if body.Role.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.start_date", *body.Role.StartDate, goa.FormatDate))
		}
		if body.Role.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.role.end_date", *body.Role.EndDate, goa.FormatDate))
		}
	}
	if body.AppointedBy != nil {
		if !(*body.AppointedBy == "Community" || *body.AppointedBy == "Membership Entitlement" || *body.AppointedBy == "Vote of End User Member Class" || *body.AppointedBy == "Vote of TSC Committee" || *body.AppointedBy == "Vote of TAC Committee" || *body.AppointedBy == "Vote of Academic Member Class" || *body.AppointedBy == "Vote of Lab Member Class" || *body.AppointedBy == "Vote of Marketing Committee" || *body.AppointedBy == "Vote of Governing Board" || *body.AppointedBy == "Vote of General Member Class" || *body.AppointedBy == "Vote of End User Committee" || *body.AppointedBy == "Vote of TOC Committee" || *body.AppointedBy == "Vote of Gold Member Class" || *body.AppointedBy == "Vote of Silver Member Class" || *body.AppointedBy == "Vote of Strategic Membership Class" || *body.AppointedBy == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.appointed_by", *body.AppointedBy, []any{"Community", "Membership Entitlement", "Vote of End User Member Class", "Vote of TSC Committee", "Vote of TAC Committee", "Vote of Academic Member Class", "Vote of Lab Member Class", "Vote of Marketing Committee", "Vote of Governing Board", "Vote of General Member Class", "Vote of End User Committee", "Vote of TOC Committee", "Vote of Gold Member Class", "Vote of Silver Member Class", "Vote of Strategic Membership Class", "None"}))
		}
	}
	if body.Status != nil {
		if !(*body.Status == "Active" || *body.Status == "Inactive") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"Active", "Inactive"}))
		}
	}
	if body.Voting != nil {
		if body.Voting.Status != nil {
			if !(*body.Voting.Status == "Alternate Voting Rep" || *body.Voting.Status == "Observer" || *body.Voting.Status == "Voting Rep" || *body.Voting.Status == "Emeritus" || *body.Voting.Status == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voting.status", *body.Voting.Status, []any{"Alternate Voting Rep", "Observer", "Voting Rep", "Emeritus", "None"}))
			}
		}
		if body.Voting.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.start_date", *body.Voting.StartDate, goa.FormatDate))
		}
		if body.Voting.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.voting.end_date", *body.Voting.EndDate, goa.FormatDate))
		}
	}
	if body.Agency != nil {
		if utf8.RuneCountInString(*body.Agency) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.agency", *body.Agency, utf8.RuneCountInString(*body.Agency), 100, false))
		}
	}
	if body.Country != nil {
		if utf8.RuneCountInString(*body.Country) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.country", *body.Country, utf8.RuneCountInString(*body.Country), 100, false))
		}
	}
	if body.Organization != nil {
		if body.Organization.Name != nil {
			if utf8.RuneCountInString(*body.Organization.Name) > 200 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization.name", *body.Organization.Name, utf8.RuneCountInString(*body.Organization.Name), 200, false))
			}
		}
		if body.Organization.Website != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.organization.website", *body.Organization.Website, goa.FormatURI))
		}
	}
	return
}
