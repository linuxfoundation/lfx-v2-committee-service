// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee-members-service client HTTP transport
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the committee-members-service service endpoint HTTP clients.
type Client struct {
	// CreateCommitteeMember Doer is the HTTP client used to make requests to the
	// create-committee-member endpoint.
	CreateCommitteeMemberDoer goahttp.Doer

	// GetCommitteeMember Doer is the HTTP client used to make requests to the
	// get-committee-member endpoint.
	GetCommitteeMemberDoer goahttp.Doer

	// UpdateCommitteeMember Doer is the HTTP client used to make requests to the
	// update-committee-member endpoint.
	UpdateCommitteeMemberDoer goahttp.Doer

	// DeleteCommitteeMember Doer is the HTTP client used to make requests to the
	// delete-committee-member endpoint.
	DeleteCommitteeMemberDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the committee-members-service
// service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateCommitteeMemberDoer: doer,
		GetCommitteeMemberDoer:    doer,
		UpdateCommitteeMemberDoer: doer,
		DeleteCommitteeMemberDoer: doer,
		RestoreResponseBody:       restoreBody,
		scheme:                    scheme,
		host:                      host,
		decoder:                   dec,
		encoder:                   enc,
	}
}

// CreateCommitteeMember returns an endpoint that makes HTTP requests to the
// committee-members-service service create-committee-member server.
func (c *Client) CreateCommitteeMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCommitteeMemberRequest(c.encoder)
		decodeResponse = DecodeCreateCommitteeMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateCommitteeMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCommitteeMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-members-service", "create-committee-member", err)
		}
		return decodeResponse(resp)
	}
}

// GetCommitteeMember returns an endpoint that makes HTTP requests to the
// committee-members-service service get-committee-member server.
func (c *Client) GetCommitteeMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCommitteeMemberRequest(c.encoder)
		decodeResponse = DecodeGetCommitteeMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetCommitteeMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCommitteeMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-members-service", "get-committee-member", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateCommitteeMember returns an endpoint that makes HTTP requests to the
// committee-members-service service update-committee-member server.
func (c *Client) UpdateCommitteeMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateCommitteeMemberRequest(c.encoder)
		decodeResponse = DecodeUpdateCommitteeMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateCommitteeMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateCommitteeMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-members-service", "update-committee-member", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteCommitteeMember returns an endpoint that makes HTTP requests to the
// committee-members-service service delete-committee-member server.
func (c *Client) DeleteCommitteeMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteCommitteeMemberRequest(c.encoder)
		decodeResponse = DecodeDeleteCommitteeMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteCommitteeMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteCommitteeMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("committee-members-service", "delete-committee-member", err)
		}
		return decodeResponse(resp)
	}
}
