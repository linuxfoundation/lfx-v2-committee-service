// Code generated by goa v3.21.5, DO NOT EDIT.
//
// committee HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-committee-service/cmd/committee-api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	committeemembersservicec "github.com/linuxfoundation/lfx-v2-committee-service/gen/http/committee_members_service/client"
	committeeservicec "github.com/linuxfoundation/lfx-v2-committee-service/gen/http/committee_service/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `committee-members-service (create-committee-member|get-committee-member|update-committee-member|delete-committee-member)
committee-service (create-committee|get-committee-base|update-committee-base|delete-committee|get-committee-settings|update-committee-settings|readyz|livez)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` committee-members-service create-committee-member --body '{
      "agency": "GSA",
      "appointed_by": "Community",
      "country": "United States",
      "email": "user@example.com",
      "first_name": "John",
      "job_title": "Chief Technology Officer",
      "last_name": "Doe",
      "organization": {
         "name": "The Linux Foundation",
         "website": "https://linuxfoundation.org"
      },
      "role": {
         "end_date": "2024-12-31",
         "name": "Chair",
         "start_date": "2023-01-01"
      },
      "status": "Active",
      "username": "user123",
      "voting": {
         "end_date": "2024-12-31",
         "start_date": "2023-01-01",
         "status": "Voting Rep"
      }
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."` + "\n" +
		os.Args[0] + ` committee-service create-committee --body '{
      "auditors": [
         "auditor_user_id1",
         "auditor_user_id2"
      ],
      "business_email_required": false,
      "calendar": {
         "public": true
      },
      "category": "Technical Steering Committee",
      "description": "Main technical oversight committee for the project",
      "display_name": "TSC Committee Calendar",
      "enable_voting": true,
      "last_reviewed_at": "2025-08-04T09:00:00Z",
      "last_reviewed_by": "user_id_12345",
      "name": "Technical Steering Committee",
      "parent_uid": "90b147f2-7cdd-157a-a2f4-9d4a567123fc",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public": true,
      "requires_review": true,
      "sso_group_enabled": true,
      "website": "https://committee.example.org",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --version "1" --bearer-token "eyJhbGci..."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		committeeMembersServiceFlags = flag.NewFlagSet("committee-members-service", flag.ContinueOnError)

		committeeMembersServiceCreateCommitteeMemberFlags           = flag.NewFlagSet("create-committee-member", flag.ExitOnError)
		committeeMembersServiceCreateCommitteeMemberBodyFlag        = committeeMembersServiceCreateCommitteeMemberFlags.String("body", "REQUIRED", "")
		committeeMembersServiceCreateCommitteeMemberUIDFlag         = committeeMembersServiceCreateCommitteeMemberFlags.String("uid", "REQUIRED", "Committee UID -- v2 uid, not related to v1 id directly")
		committeeMembersServiceCreateCommitteeMemberVersionFlag     = committeeMembersServiceCreateCommitteeMemberFlags.String("version", "REQUIRED", "")
		committeeMembersServiceCreateCommitteeMemberBearerTokenFlag = committeeMembersServiceCreateCommitteeMemberFlags.String("bearer-token", "", "")

		committeeMembersServiceGetCommitteeMemberFlags           = flag.NewFlagSet("get-committee-member", flag.ExitOnError)
		committeeMembersServiceGetCommitteeMemberUIDFlag         = committeeMembersServiceGetCommitteeMemberFlags.String("uid", "REQUIRED", "Committee UID -- v2 uid, not related to v1 id directly")
		committeeMembersServiceGetCommitteeMemberMemberUIDFlag   = committeeMembersServiceGetCommitteeMemberFlags.String("member-uid", "REQUIRED", "Committee member UID -- v2 uid, not related to v1 id directly")
		committeeMembersServiceGetCommitteeMemberVersionFlag     = committeeMembersServiceGetCommitteeMemberFlags.String("version", "REQUIRED", "")
		committeeMembersServiceGetCommitteeMemberBearerTokenFlag = committeeMembersServiceGetCommitteeMemberFlags.String("bearer-token", "", "")

		committeeMembersServiceUpdateCommitteeMemberFlags           = flag.NewFlagSet("update-committee-member", flag.ExitOnError)
		committeeMembersServiceUpdateCommitteeMemberBodyFlag        = committeeMembersServiceUpdateCommitteeMemberFlags.String("body", "REQUIRED", "")
		committeeMembersServiceUpdateCommitteeMemberUIDFlag         = committeeMembersServiceUpdateCommitteeMemberFlags.String("uid", "REQUIRED", "Committee UID -- v2 uid, not related to v1 id directly")
		committeeMembersServiceUpdateCommitteeMemberMemberUIDFlag   = committeeMembersServiceUpdateCommitteeMemberFlags.String("member-uid", "REQUIRED", "Committee member UID -- v2 uid, not related to v1 id directly")
		committeeMembersServiceUpdateCommitteeMemberVersionFlag     = committeeMembersServiceUpdateCommitteeMemberFlags.String("version", "REQUIRED", "")
		committeeMembersServiceUpdateCommitteeMemberBearerTokenFlag = committeeMembersServiceUpdateCommitteeMemberFlags.String("bearer-token", "", "")
		committeeMembersServiceUpdateCommitteeMemberIfMatchFlag     = committeeMembersServiceUpdateCommitteeMemberFlags.String("if-match", "REQUIRED", "")

		committeeMembersServiceDeleteCommitteeMemberFlags           = flag.NewFlagSet("delete-committee-member", flag.ExitOnError)
		committeeMembersServiceDeleteCommitteeMemberUIDFlag         = committeeMembersServiceDeleteCommitteeMemberFlags.String("uid", "REQUIRED", "Committee UID -- v2 uid, not related to v1 id directly")
		committeeMembersServiceDeleteCommitteeMemberMemberUIDFlag   = committeeMembersServiceDeleteCommitteeMemberFlags.String("member-uid", "REQUIRED", "Committee member UID -- v2 uid, not related to v1 id directly")
		committeeMembersServiceDeleteCommitteeMemberVersionFlag     = committeeMembersServiceDeleteCommitteeMemberFlags.String("version", "REQUIRED", "")
		committeeMembersServiceDeleteCommitteeMemberBearerTokenFlag = committeeMembersServiceDeleteCommitteeMemberFlags.String("bearer-token", "", "")
		committeeMembersServiceDeleteCommitteeMemberIfMatchFlag     = committeeMembersServiceDeleteCommitteeMemberFlags.String("if-match", "REQUIRED", "")

		committeeServiceFlags = flag.NewFlagSet("committee-service", flag.ContinueOnError)

		committeeServiceCreateCommitteeFlags           = flag.NewFlagSet("create-committee", flag.ExitOnError)
		committeeServiceCreateCommitteeBodyFlag        = committeeServiceCreateCommitteeFlags.String("body", "REQUIRED", "")
		committeeServiceCreateCommitteeVersionFlag     = committeeServiceCreateCommitteeFlags.String("version", "", "")
		committeeServiceCreateCommitteeBearerTokenFlag = committeeServiceCreateCommitteeFlags.String("bearer-token", "", "")

		committeeServiceGetCommitteeBaseFlags           = flag.NewFlagSet("get-committee-base", flag.ExitOnError)
		committeeServiceGetCommitteeBaseUIDFlag         = committeeServiceGetCommitteeBaseFlags.String("uid", "REQUIRED", "Committee UID -- v2 uid, not related to v1 id directly")
		committeeServiceGetCommitteeBaseVersionFlag     = committeeServiceGetCommitteeBaseFlags.String("version", "", "")
		committeeServiceGetCommitteeBaseBearerTokenFlag = committeeServiceGetCommitteeBaseFlags.String("bearer-token", "", "")

		committeeServiceUpdateCommitteeBaseFlags           = flag.NewFlagSet("update-committee-base", flag.ExitOnError)
		committeeServiceUpdateCommitteeBaseBodyFlag        = committeeServiceUpdateCommitteeBaseFlags.String("body", "REQUIRED", "")
		committeeServiceUpdateCommitteeBaseUIDFlag         = committeeServiceUpdateCommitteeBaseFlags.String("uid", "REQUIRED", "Committee UID -- v2 uid, not related to v1 id directly")
		committeeServiceUpdateCommitteeBaseVersionFlag     = committeeServiceUpdateCommitteeBaseFlags.String("version", "", "")
		committeeServiceUpdateCommitteeBaseBearerTokenFlag = committeeServiceUpdateCommitteeBaseFlags.String("bearer-token", "", "")
		committeeServiceUpdateCommitteeBaseIfMatchFlag     = committeeServiceUpdateCommitteeBaseFlags.String("if-match", "", "")

		committeeServiceDeleteCommitteeFlags           = flag.NewFlagSet("delete-committee", flag.ExitOnError)
		committeeServiceDeleteCommitteeUIDFlag         = committeeServiceDeleteCommitteeFlags.String("uid", "REQUIRED", "Committee UID -- v2 uid, not related to v1 id directly")
		committeeServiceDeleteCommitteeVersionFlag     = committeeServiceDeleteCommitteeFlags.String("version", "", "")
		committeeServiceDeleteCommitteeBearerTokenFlag = committeeServiceDeleteCommitteeFlags.String("bearer-token", "", "")
		committeeServiceDeleteCommitteeIfMatchFlag     = committeeServiceDeleteCommitteeFlags.String("if-match", "", "")

		committeeServiceGetCommitteeSettingsFlags           = flag.NewFlagSet("get-committee-settings", flag.ExitOnError)
		committeeServiceGetCommitteeSettingsUIDFlag         = committeeServiceGetCommitteeSettingsFlags.String("uid", "REQUIRED", "Committee UID -- v2 uid, not related to v1 id directly")
		committeeServiceGetCommitteeSettingsVersionFlag     = committeeServiceGetCommitteeSettingsFlags.String("version", "", "")
		committeeServiceGetCommitteeSettingsBearerTokenFlag = committeeServiceGetCommitteeSettingsFlags.String("bearer-token", "", "")

		committeeServiceUpdateCommitteeSettingsFlags           = flag.NewFlagSet("update-committee-settings", flag.ExitOnError)
		committeeServiceUpdateCommitteeSettingsBodyFlag        = committeeServiceUpdateCommitteeSettingsFlags.String("body", "REQUIRED", "")
		committeeServiceUpdateCommitteeSettingsUIDFlag         = committeeServiceUpdateCommitteeSettingsFlags.String("uid", "REQUIRED", "Committee UID -- v2 uid, not related to v1 id directly")
		committeeServiceUpdateCommitteeSettingsVersionFlag     = committeeServiceUpdateCommitteeSettingsFlags.String("version", "", "")
		committeeServiceUpdateCommitteeSettingsBearerTokenFlag = committeeServiceUpdateCommitteeSettingsFlags.String("bearer-token", "", "")
		committeeServiceUpdateCommitteeSettingsIfMatchFlag     = committeeServiceUpdateCommitteeSettingsFlags.String("if-match", "", "")

		committeeServiceReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		committeeServiceLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)
	)
	committeeMembersServiceFlags.Usage = committeeMembersServiceUsage
	committeeMembersServiceCreateCommitteeMemberFlags.Usage = committeeMembersServiceCreateCommitteeMemberUsage
	committeeMembersServiceGetCommitteeMemberFlags.Usage = committeeMembersServiceGetCommitteeMemberUsage
	committeeMembersServiceUpdateCommitteeMemberFlags.Usage = committeeMembersServiceUpdateCommitteeMemberUsage
	committeeMembersServiceDeleteCommitteeMemberFlags.Usage = committeeMembersServiceDeleteCommitteeMemberUsage

	committeeServiceFlags.Usage = committeeServiceUsage
	committeeServiceCreateCommitteeFlags.Usage = committeeServiceCreateCommitteeUsage
	committeeServiceGetCommitteeBaseFlags.Usage = committeeServiceGetCommitteeBaseUsage
	committeeServiceUpdateCommitteeBaseFlags.Usage = committeeServiceUpdateCommitteeBaseUsage
	committeeServiceDeleteCommitteeFlags.Usage = committeeServiceDeleteCommitteeUsage
	committeeServiceGetCommitteeSettingsFlags.Usage = committeeServiceGetCommitteeSettingsUsage
	committeeServiceUpdateCommitteeSettingsFlags.Usage = committeeServiceUpdateCommitteeSettingsUsage
	committeeServiceReadyzFlags.Usage = committeeServiceReadyzUsage
	committeeServiceLivezFlags.Usage = committeeServiceLivezUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "committee-members-service":
			svcf = committeeMembersServiceFlags
		case "committee-service":
			svcf = committeeServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "committee-members-service":
			switch epn {
			case "create-committee-member":
				epf = committeeMembersServiceCreateCommitteeMemberFlags

			case "get-committee-member":
				epf = committeeMembersServiceGetCommitteeMemberFlags

			case "update-committee-member":
				epf = committeeMembersServiceUpdateCommitteeMemberFlags

			case "delete-committee-member":
				epf = committeeMembersServiceDeleteCommitteeMemberFlags

			}

		case "committee-service":
			switch epn {
			case "create-committee":
				epf = committeeServiceCreateCommitteeFlags

			case "get-committee-base":
				epf = committeeServiceGetCommitteeBaseFlags

			case "update-committee-base":
				epf = committeeServiceUpdateCommitteeBaseFlags

			case "delete-committee":
				epf = committeeServiceDeleteCommitteeFlags

			case "get-committee-settings":
				epf = committeeServiceGetCommitteeSettingsFlags

			case "update-committee-settings":
				epf = committeeServiceUpdateCommitteeSettingsFlags

			case "readyz":
				epf = committeeServiceReadyzFlags

			case "livez":
				epf = committeeServiceLivezFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "committee-members-service":
			c := committeemembersservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-committee-member":
				endpoint = c.CreateCommitteeMember()
				data, err = committeemembersservicec.BuildCreateCommitteeMemberPayload(*committeeMembersServiceCreateCommitteeMemberBodyFlag, *committeeMembersServiceCreateCommitteeMemberUIDFlag, *committeeMembersServiceCreateCommitteeMemberVersionFlag, *committeeMembersServiceCreateCommitteeMemberBearerTokenFlag)
			case "get-committee-member":
				endpoint = c.GetCommitteeMember()
				data, err = committeemembersservicec.BuildGetCommitteeMemberPayload(*committeeMembersServiceGetCommitteeMemberUIDFlag, *committeeMembersServiceGetCommitteeMemberMemberUIDFlag, *committeeMembersServiceGetCommitteeMemberVersionFlag, *committeeMembersServiceGetCommitteeMemberBearerTokenFlag)
			case "update-committee-member":
				endpoint = c.UpdateCommitteeMember()
				data, err = committeemembersservicec.BuildUpdateCommitteeMemberPayload(*committeeMembersServiceUpdateCommitteeMemberBodyFlag, *committeeMembersServiceUpdateCommitteeMemberUIDFlag, *committeeMembersServiceUpdateCommitteeMemberMemberUIDFlag, *committeeMembersServiceUpdateCommitteeMemberVersionFlag, *committeeMembersServiceUpdateCommitteeMemberBearerTokenFlag, *committeeMembersServiceUpdateCommitteeMemberIfMatchFlag)
			case "delete-committee-member":
				endpoint = c.DeleteCommitteeMember()
				data, err = committeemembersservicec.BuildDeleteCommitteeMemberPayload(*committeeMembersServiceDeleteCommitteeMemberUIDFlag, *committeeMembersServiceDeleteCommitteeMemberMemberUIDFlag, *committeeMembersServiceDeleteCommitteeMemberVersionFlag, *committeeMembersServiceDeleteCommitteeMemberBearerTokenFlag, *committeeMembersServiceDeleteCommitteeMemberIfMatchFlag)
			}
		case "committee-service":
			c := committeeservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-committee":
				endpoint = c.CreateCommittee()
				data, err = committeeservicec.BuildCreateCommitteePayload(*committeeServiceCreateCommitteeBodyFlag, *committeeServiceCreateCommitteeVersionFlag, *committeeServiceCreateCommitteeBearerTokenFlag)
			case "get-committee-base":
				endpoint = c.GetCommitteeBase()
				data, err = committeeservicec.BuildGetCommitteeBasePayload(*committeeServiceGetCommitteeBaseUIDFlag, *committeeServiceGetCommitteeBaseVersionFlag, *committeeServiceGetCommitteeBaseBearerTokenFlag)
			case "update-committee-base":
				endpoint = c.UpdateCommitteeBase()
				data, err = committeeservicec.BuildUpdateCommitteeBasePayload(*committeeServiceUpdateCommitteeBaseBodyFlag, *committeeServiceUpdateCommitteeBaseUIDFlag, *committeeServiceUpdateCommitteeBaseVersionFlag, *committeeServiceUpdateCommitteeBaseBearerTokenFlag, *committeeServiceUpdateCommitteeBaseIfMatchFlag)
			case "delete-committee":
				endpoint = c.DeleteCommittee()
				data, err = committeeservicec.BuildDeleteCommitteePayload(*committeeServiceDeleteCommitteeUIDFlag, *committeeServiceDeleteCommitteeVersionFlag, *committeeServiceDeleteCommitteeBearerTokenFlag, *committeeServiceDeleteCommitteeIfMatchFlag)
			case "get-committee-settings":
				endpoint = c.GetCommitteeSettings()
				data, err = committeeservicec.BuildGetCommitteeSettingsPayload(*committeeServiceGetCommitteeSettingsUIDFlag, *committeeServiceGetCommitteeSettingsVersionFlag, *committeeServiceGetCommitteeSettingsBearerTokenFlag)
			case "update-committee-settings":
				endpoint = c.UpdateCommitteeSettings()
				data, err = committeeservicec.BuildUpdateCommitteeSettingsPayload(*committeeServiceUpdateCommitteeSettingsBodyFlag, *committeeServiceUpdateCommitteeSettingsUIDFlag, *committeeServiceUpdateCommitteeSettingsVersionFlag, *committeeServiceUpdateCommitteeSettingsBearerTokenFlag, *committeeServiceUpdateCommitteeSettingsIfMatchFlag)
			case "readyz":
				endpoint = c.Readyz()
			case "livez":
				endpoint = c.Livez()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// committeeMembersServiceUsage displays the usage of the
// committee-members-service command and its subcommands.
func committeeMembersServiceUsage() {
	fmt.Fprintf(os.Stderr, `Committee members management service
Usage:
    %[1]s [globalflags] committee-members-service COMMAND [flags]

COMMAND:
    create-committee-member: Add a new member to a committee
    get-committee-member: Get a specific committee member by UID
    update-committee-member: Replace an existing committee member (requires complete resource)
    delete-committee-member: Remove a member from a committee

Additional help:
    %[1]s committee-members-service COMMAND --help
`, os.Args[0])
}
func committeeMembersServiceCreateCommitteeMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-members-service create-committee-member -body JSON -uid STRING -version STRING -bearer-token STRING

Add a new member to a committee
    -body JSON: 
    -uid STRING: Committee UID -- v2 uid, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s committee-members-service create-committee-member --body '{
      "agency": "GSA",
      "appointed_by": "Community",
      "country": "United States",
      "email": "user@example.com",
      "first_name": "John",
      "job_title": "Chief Technology Officer",
      "last_name": "Doe",
      "organization": {
         "name": "The Linux Foundation",
         "website": "https://linuxfoundation.org"
      },
      "role": {
         "end_date": "2024-12-31",
         "name": "Chair",
         "start_date": "2023-01-01"
      },
      "status": "Active",
      "username": "user123",
      "voting": {
         "end_date": "2024-12-31",
         "start_date": "2023-01-01",
         "status": "Voting Rep"
      }
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func committeeMembersServiceGetCommitteeMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-members-service get-committee-member -uid STRING -member-uid STRING -version STRING -bearer-token STRING

Get a specific committee member by UID
    -uid STRING: Committee UID -- v2 uid, not related to v1 id directly
    -member-uid STRING: Committee member UID -- v2 uid, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s committee-members-service get-committee-member --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --member-uid "2200b646-fbb2-4de7-ad80-fd195a874baf" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func committeeMembersServiceUpdateCommitteeMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-members-service update-committee-member -body JSON -uid STRING -member-uid STRING -version STRING -bearer-token STRING -if-match STRING

Replace an existing committee member (requires complete resource)
    -body JSON: 
    -uid STRING: Committee UID -- v2 uid, not related to v1 id directly
    -member-uid STRING: Committee member UID -- v2 uid, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s committee-members-service update-committee-member --body '{
      "agency": "GSA",
      "appointed_by": "Community",
      "country": "United States",
      "email": "user@example.com",
      "first_name": "John",
      "job_title": "Chief Technology Officer",
      "last_name": "Doe",
      "organization": {
         "name": "The Linux Foundation",
         "website": "https://linuxfoundation.org"
      },
      "role": {
         "end_date": "2024-12-31",
         "name": "Chair",
         "start_date": "2023-01-01"
      },
      "status": "Active",
      "username": "user123",
      "voting": {
         "end_date": "2024-12-31",
         "start_date": "2023-01-01",
         "status": "Voting Rep"
      }
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --member-uid "2200b646-fbb2-4de7-ad80-fd195a874baf" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func committeeMembersServiceDeleteCommitteeMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-members-service delete-committee-member -uid STRING -member-uid STRING -version STRING -bearer-token STRING -if-match STRING

Remove a member from a committee
    -uid STRING: Committee UID -- v2 uid, not related to v1 id directly
    -member-uid STRING: Committee member UID -- v2 uid, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s committee-members-service delete-committee-member --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --member-uid "2200b646-fbb2-4de7-ad80-fd195a874baf" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

// committeeServiceUsage displays the usage of the committee-service command
// and its subcommands.
func committeeServiceUsage() {
	fmt.Fprintf(os.Stderr, `Committee management service
Usage:
    %[1]s [globalflags] committee-service COMMAND [flags]

COMMAND:
    create-committee: Create Committee
    get-committee-base: Get Committee
    update-committee-base: Update Committee
    delete-committee: Delete Committee
    get-committee-settings: Get Committee Settings
    update-committee-settings: Update Committee Settings
    readyz: Check if the service is able to take inbound requests.
    livez: Check if the service is alive.

Additional help:
    %[1]s committee-service COMMAND --help
`, os.Args[0])
}
func committeeServiceCreateCommitteeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-service create-committee -body JSON -version STRING -bearer-token STRING

Create Committee
    -body JSON: 
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s committee-service create-committee --body '{
      "auditors": [
         "auditor_user_id1",
         "auditor_user_id2"
      ],
      "business_email_required": false,
      "calendar": {
         "public": true
      },
      "category": "Technical Steering Committee",
      "description": "Main technical oversight committee for the project",
      "display_name": "TSC Committee Calendar",
      "enable_voting": true,
      "last_reviewed_at": "2025-08-04T09:00:00Z",
      "last_reviewed_by": "user_id_12345",
      "name": "Technical Steering Committee",
      "parent_uid": "90b147f2-7cdd-157a-a2f4-9d4a567123fc",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public": true,
      "requires_review": true,
      "sso_group_enabled": true,
      "website": "https://committee.example.org",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func committeeServiceGetCommitteeBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-service get-committee-base -uid STRING -version STRING -bearer-token STRING

Get Committee
    -uid STRING: Committee UID -- v2 uid, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s committee-service get-committee-base --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func committeeServiceUpdateCommitteeBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-service update-committee-base -body JSON -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update Committee
    -body JSON: 
    -uid STRING: Committee UID -- v2 uid, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s committee-service update-committee-base --body '{
      "calendar": {
         "public": true
      },
      "category": "Technical Steering Committee",
      "description": "Main technical oversight committee for the project",
      "display_name": "TSC Committee Calendar",
      "enable_voting": true,
      "name": "Technical Steering Committee",
      "parent_uid": "90b147f2-7cdd-157a-a2f4-9d4a567123fc",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public": true,
      "requires_review": true,
      "sso_group_enabled": true,
      "website": "https://committee.example.org"
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func committeeServiceDeleteCommitteeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-service delete-committee -uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete Committee
    -uid STRING: Committee UID -- v2 uid, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s committee-service delete-committee --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func committeeServiceGetCommitteeSettingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-service get-committee-settings -uid STRING -version STRING -bearer-token STRING

Get Committee Settings
    -uid STRING: Committee UID -- v2 uid, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s committee-service get-committee-settings --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func committeeServiceUpdateCommitteeSettingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-service update-committee-settings -body JSON -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update Committee Settings
    -body JSON: 
    -uid STRING: Committee UID -- v2 uid, not related to v1 id directly
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s committee-service update-committee-settings --body '{
      "auditors": [
         "auditor_user_id1",
         "auditor_user_id2"
      ],
      "business_email_required": false,
      "last_reviewed_at": "2025-08-04T09:00:00Z",
      "last_reviewed_by": "user_id_12345",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func committeeServiceReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-service readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s committee-service readyz
`, os.Args[0])
}

func committeeServiceLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] committee-service livez

Check if the service is alive.

Example:
    %[1]s committee-service livez
`, os.Args[0])
}
